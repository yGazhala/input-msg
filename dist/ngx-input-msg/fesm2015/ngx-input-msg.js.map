{"version":3,"file":"ngx-input-msg.js.map","sources":["ng://ngx-input-msg/lib/input-msg-config.service.ts","ng://ngx-input-msg/lib/input-storage.service.ts","ng://ngx-input-msg/lib/models/from-event-mock.ts","ng://ngx-input-msg/lib/models/abstract-input.ts","ng://ngx-input-msg/lib/models/input-validator.ts","ng://ngx-input-msg/lib/input-email/email-validator.ts","ng://ngx-input-msg/lib/input-email/email-validator-factory.service.ts","ng://ngx-input-msg/lib/input-email/input-email.directive.ts","ng://ngx-input-msg/lib/input-number/number-validator.ts","ng://ngx-input-msg/lib/input-number/number-validator-factory.service.ts","ng://ngx-input-msg/lib/input-number/input-number.directive.ts","ng://ngx-input-msg/lib/input-text/text-validator.ts","ng://ngx-input-msg/lib/input-text/text-validator-factory.service.ts","ng://ngx-input-msg/lib/input-text/input-text.directive.ts","ng://ngx-input-msg/lib/label/label.directive.ts","ng://ngx-input-msg/lib/msg/msg.component.ts","ng://ngx-input-msg/lib/input-msg.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\nimport { inputMsg } from './types';\r\n\r\n/**\r\n * Provides configuration for displaying messages.\r\n */\r\n@Injectable()\r\nexport class InputMsgConfigService {\r\n\r\n  private defaultConfig: inputMsg.Config = {\r\n    colors: {\r\n      error: '#f44336',\r\n      maxlength: 'grey'\r\n    },\r\n    position: 'bottom-left',\r\n    msg: {\r\n      email: (label: string) => `Wrong ${label}`,\r\n      integer: 'Fractional digits are forbidden',\r\n      max: (label: string, allowed: number) => `Maximum allowed ${label} is ${allowed}`,\r\n      min: (label: string, allowed: number) => `Minimum allowed ${label} is ${allowed}`,\r\n      maxlength: (label: string, allowed: number) => `Maximum ${allowed} chars limit was reached`,\r\n      minlength: (label: string, allowed: number) => `At least ${allowed} chars length are required`,\r\n      pattern: (label: string) => `Invalid ${label}`,\r\n      required: (label: string) => `${label} is required`\r\n    }\r\n  };\r\n\r\n  public get(): inputMsg.Config {\r\n    return this.defaultConfig;\r\n  }\r\n\r\n  public set(config: inputMsg.Config) {\r\n\r\n    if (config.position) {\r\n      this.defaultConfig.position = config.position;\r\n    }\r\n\r\n    // set colors\r\n    if (config.colors) {\r\n      Object.keys(config.colors).forEach((key: string) => {\r\n        this.defaultConfig.colors[key] = config.colors[key];\r\n      });\r\n    }\r\n\r\n    // set msg\r\n    if (!config.msg) {\r\n      return;\r\n    }\r\n    Object.keys(config.msg).forEach((key: string) => {\r\n      this.defaultConfig.msg[key] = config.msg[key];\r\n    });\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { inputMsg } from './types';\r\n\r\n/**\r\n * This utility service stores input element params\r\n * for communication between ngxInput directive,\r\n * ngx-msg component and ngxLabel directive.\r\n */\r\n@Injectable()\r\nexport class InputStorageService {\r\n\r\n  private storageById: {\r\n    [id: string]: inputMsg.InputParams\r\n  } = {};\r\n\r\n  /**\r\n   * Note, this storage is provided, because\r\n   * user might set id or name attribute to\r\n   * the input element or even both of them.\r\n   */\r\n  private storageByName: {\r\n    [id: string]: inputMsg.InputParams\r\n  } = {};\r\n\r\n  public get(key: string): inputMsg.InputParams {\r\n    return this.storageById[key] || this.storageByName[key];\r\n  }\r\n\r\n  public remove(key: string): void {\r\n    this.removeFromSpecificStorage('storageById', key);\r\n    this.removeFromSpecificStorage('storageByName', key);\r\n  }\r\n\r\n  public set(input: inputMsg.InputParams, id?: string, name?: string): void {\r\n    if (id) {\r\n      this.storageById[id] = input;\r\n    }\r\n    if (name) {\r\n      this.storageByName[name] = input;\r\n    }\r\n  }\r\n\r\n\r\n  private removeFromSpecificStorage(storage: 'storageById' | 'storageByName', key: string): void {\r\n    if (!this[storage][key]) {\r\n      return;\r\n    }\r\n    delete this[storage][key];\r\n  }\r\n\r\n}\r\n","/**\r\n * This temporary surrogate replaces\r\n * original rxjs fromEvent function\r\n * to handle rxjs v5 to v6 migration problem.\r\n */\r\nexport const fromEventMock = (eventTarget: HTMLElement, eventName: string, handler: () => void): { unsubscribe: () => void; } => {\r\n\r\n  eventTarget.addEventListener(eventName, handler);\r\n  return {\r\n    unsubscribe: () => {\r\n      eventTarget.removeEventListener(eventName, handler);\r\n    }\r\n  };\r\n\r\n};\r\n","import { ElementRef, Input, OnInit, OnChanges, OnDestroy, SimpleChange } from '@angular/core';\r\nimport { AbstractControl, NgModel, NgForm } from '@angular/forms';\r\n\r\nimport { BehaviorSubject, Subject, Subscription } from 'rxjs';\r\n// rxjs v5/v6 compatible\r\nimport { fromEventMock } from './from-event-mock';\r\n\r\nimport { InputStorageService } from '../input-storage.service';\r\n\r\n// types\r\nimport { inputMsg } from '../types';\r\n\r\n/**\r\n * An abstract class to be derived by\r\n * a concrete input directive class.\r\n * Validates an input element and emits\r\n * the validation status to the listeners\r\n * (MsgComponent, LabelDirective)\r\n * through InputStorageService.\r\n */\r\nexport abstract class AbstractInput implements OnInit, OnChanges, OnDestroy {\r\n\r\n  @Input() public id: string;\r\n  @Input() public label: string;\r\n  @Input() public matInput: '';\r\n  @Input() public model: NgModel;\r\n  @Input() public name: string;\r\n  @Input() public placeholder: string;\r\n  @Input() public required: '' | boolean;\r\n\r\n  protected inputParams: inputMsg.InputParams;\r\n  /**\r\n   * A dictionary with callbacks to get current validation params.\r\n   */\r\n  protected abstract validatorOptions: { [name: string]: inputMsg.ValidatorParamFn };\r\n\r\n  private elem: HTMLInputElement;\r\n  private form: NgForm;\r\n  private inputKey: string;\r\n  private isMaterial: boolean;\r\n  /**\r\n   * Contains true if the prevoius input state was valid.\r\n   */\r\n  private prevValid: boolean;\r\n  private statusSubscriptions: Subscription[] = [];\r\n  /**\r\n   * The current validation params of the input\r\n   */\r\n  private validatorParams: inputMsg.ValidatorParam[];\r\n  private validator: inputMsg.InputValidator;\r\n\r\n  constructor(\r\n    protected elemRef: ElementRef,\r\n    protected inputStorageService: InputStorageService,\r\n    protected inputValidatorFactory: inputMsg.InputValidatorFactory\r\n  ) { }\r\n\r\n  public ngOnChanges(changes: { [prop: string]: SimpleChange }): void {\r\n\r\n    const changeableProps = {\r\n      placeholder: true,\r\n      label: true,\r\n      required: true\r\n    };\r\n\r\n    Object.keys(changes).forEach((name) => {\r\n      if (!changeableProps[name] ||\r\n        !this.validatorOptions[name] ||\r\n        changes[name].isFirstChange()\r\n      ) {\r\n        return;\r\n      }\r\n\r\n      if (name === 'placeholder' || name === 'label') {\r\n        this.inputParams.label = changes[name].currentValue;\r\n        this.inputParams.paramChange.next('label');\r\n        return;\r\n      }\r\n\r\n      this.setValidationParams();\r\n      this.inputParams.paramChange.next(name as inputMsg.ValidatorName);\r\n      this.createValidator();\r\n      this.model.control.updateValueAndValidity();\r\n    });\r\n  }\r\n\r\n  public ngOnDestroy(): void {\r\n    this.statusOff();\r\n    this.inputStorageService.remove(this.inputKey);\r\n  }\r\n\r\n  public ngOnInit(): void {\r\n\r\n    this.elem = this.elemRef.nativeElement;\r\n    this.isMaterial = this.matInput === '';\r\n    this.inputKey = this.id || this.name;\r\n\r\n    this.checkRequiredParams();\r\n\r\n    this.setMatFormFieldClass();\r\n\r\n    this.initInputParams();\r\n    this.setValidationParams();\r\n    this.createValidator();\r\n    this.inputStorageService.set(this.inputParams, this.id, this.name);\r\n\r\n    // Wait till NgForm will be initialized\r\n    setTimeout(() => {\r\n      this.form = this.model.formDirective as NgForm;\r\n      if (!this.form) {\r\n        throw new Error(`ngxInput directive: the element with name=\"${this.name}\" have to be inside a <form> element`);\r\n      }\r\n      this.statusOn();\r\n    }, 0);\r\n  }\r\n\r\n  public validate(control: AbstractControl): { [validatorName: string]: any } | null {\r\n    return this.validator.validate(control);\r\n  }\r\n\r\n  protected hasBoolaenParam(name: string): boolean {\r\n    return this[name] === '' || this[name] === true;\r\n  }\r\n\r\n  protected hasNumberParam(name: string): boolean {\r\n    return !isNaN(this[name]) && isFinite(this[name]);\r\n  }\r\n\r\n  private checkRequiredParams(): void {\r\n    if (!this.name) {\r\n      throw new Error(`ngxInput directive: can\\'t find name attribute on the element`);\r\n    }\r\n    if (!(this.model instanceof NgModel)) {\r\n      throw new Error(`ngxInput directive: NgModel instance have to be provided to [model] param of the element`);\r\n    }\r\n  }\r\n\r\n  private createValidator(): void {\r\n\r\n    const validators: { [validatorName: string]: inputMsg.ValidatorParam } = {};\r\n    this.validatorParams.forEach(param => {\r\n      validators[param.name] = param;\r\n    });\r\n\r\n    this.validator = this.inputValidatorFactory.create(validators);\r\n  }\r\n\r\n  private initInputParams(): void {\r\n\r\n    this.inputParams = {\r\n      label: this.placeholder || this.label,\r\n      material: this.isMaterial,\r\n      paramChange: new Subject(),\r\n      status: new BehaviorSubject('pristine' as inputMsg.InputStatus),\r\n      valid: new BehaviorSubject(true),\r\n      validationParams: undefined\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Sets 'ngx-msg__mat-form-field'\r\n   * if matInput directive was set\r\n   */\r\n  private setMatFormFieldClass(): void {\r\n\r\n    if (!this.isMaterial) {\r\n      return;\r\n    }\r\n    const input = this.elemRef.nativeElement as HTMLInputElement;\r\n    let parent: HTMLElement = input.parentElement;\r\n\r\n    for (let i = 0; i < 10; i++) {\r\n      if (parent.tagName === 'MAT-FORM-FIELD') {\r\n        break;\r\n      }\r\n      parent = parent.parentElement;\r\n      if (i === 9) {\r\n        throw new Error('ngxInput directive: Can\\'t find parent <mat-form-field> elem');\r\n      }\r\n    }\r\n    parent.classList.add('ngx-msg__mat-form-field');\r\n  }\r\n\r\n  /**\r\n   * Sets current validation params on init or on changes\r\n   */\r\n  private setValidationParams(): void {\r\n\r\n    this.inputParams.validationParams = {};\r\n    this.validatorParams = [];\r\n\r\n    if (this.hasBoolaenParam('required')) {\r\n      const requiredParam: inputMsg.ValidatorParam = {\r\n        name: 'required',\r\n        value: undefined,\r\n        set: true\r\n      };\r\n      this.inputParams.validationParams.required = requiredParam;\r\n      this.validatorParams.push(requiredParam);\r\n    }\r\n\r\n    Object.keys(this.validatorOptions).forEach(name => {\r\n      const param: inputMsg.ValidatorParam = this.validatorOptions[name]();\r\n      if (param.set) {\r\n        this.inputParams.validationParams[name] = param;\r\n        this.validatorParams.push(param);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Stops generating the input status\r\n   */\r\n  private statusOff(): void {\r\n    this.statusSubscriptions.forEach((sub) => {\r\n      sub.unsubscribe();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Starts generating the input status\r\n   */\r\n  private statusOn(): void {\r\n\r\n    // Emits an error status if the input is invalid.\r\n    const emitErrorStatus = (): void => {\r\n      for (const param of this.validatorParams) {\r\n        if (this.model.hasError(param.name)) {\r\n          this.inputParams.valid.next(false);\r\n          this.inputParams.status.next(param.name);\r\n          return;\r\n        }\r\n      }\r\n    };\r\n\r\n    const emitErrorStatusOnTouched = (): void => {\r\n      if (this.model.touched || this.form.submitted) {\r\n        emitErrorStatus();\r\n      }\r\n    };\r\n\r\n    const emitValidAndPristineStatus = (status: string): void => {\r\n      switch (status) {\r\n        case 'INVALID':\r\n          this.prevValid = false;\r\n          break;\r\n        case 'VALID':\r\n          if (!this.prevValid) {\r\n            this.inputParams.valid.next(true);\r\n            this.inputParams.status.next('valid');\r\n          }\r\n          this.prevValid = true;\r\n          break;\r\n        case 'PRISTINE':\r\n          this.inputParams.valid.next(true);\r\n          this.inputParams.status.next('pristine');\r\n          break;\r\n        default:\r\n          return;\r\n      }\r\n    };\r\n\r\n    const blurSub = fromEventMock(this.elem, 'blur', emitErrorStatusOnTouched);\r\n    this.statusSubscriptions.push(blurSub as Subscription);\r\n\r\n    const controlValueSub: Subscription = this.model.valueChanges\r\n      .subscribe(emitErrorStatusOnTouched);\r\n    this.statusSubscriptions.push(controlValueSub);\r\n\r\n    const formSubmitSub: Subscription = this.form.ngSubmit\r\n      .subscribe(emitErrorStatus);\r\n    this.statusSubscriptions.push(formSubmitSub);\r\n\r\n    const controlStatusSub: Subscription = this.model.statusChanges\r\n      .subscribe(emitValidAndPristineStatus);\r\n    this.statusSubscriptions.push(controlStatusSub);\r\n\r\n    // Adds/removes 'ngx-input_invalid' class to the input\r\n    const toggleClassOnValidChange = (valid: boolean): void => {\r\n      if (valid) {\r\n        this.elem.classList.remove('ngx-input_invalid');\r\n      } else {\r\n        this.elem.classList.add('ngx-input_invalid');\r\n      }\r\n    };\r\n    const validSub: Subscription = this.inputParams.valid\r\n      .subscribe(toggleClassOnValidChange);\r\n    this.statusSubscriptions.push(validSub);\r\n\r\n  }\r\n\r\n}\r\n","import { AbstractControl } from '@angular/forms';\r\n\r\nimport { inputMsg } from '../types';\r\n\r\nexport abstract class InputValidator implements inputMsg.InputValidator {\r\n\r\n  /**\r\n   * All available validators for specific input type\r\n   */\r\n  protected abstract availableValidators: { [name: string]: inputMsg.ValidatorFn<any> };\r\n  /**\r\n   * The sequence of validator names to validate an input element with.\r\n   * Validators are applied one by one.\r\n   * @example ['required', 'minlenght', 'maxlength', 'pattern']\r\n   */\r\n  protected abstract validatorSequence: string[];\r\n  /**\r\n   * The current validators applied to the specific input element\r\n   */\r\n  private currentValidators: inputMsg.ValidatorConfig<any>[];\r\n\r\n\r\n  public validate(control: AbstractControl): { [validatorName: string]: any } | null {\r\n\r\n    let result: { [validatorName: string]: any } | null = null;\r\n    for (const validator of this.currentValidators) {\r\n      result = validator.fn(control.value, validator.value);\r\n      // break if the input is invalid\r\n      if (result !== null) {\r\n        break;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n\r\n  protected empty(value: any): boolean {\r\n    return typeof value === 'undefined' || value === '' || value === null;\r\n  }\r\n\r\n  protected setCurrentValidators(validatorsToApply: { [validatorName: string]: inputMsg.ValidatorParam }): void {\r\n\r\n    if (typeof this.availableValidators !== 'object') {\r\n      throw new Error('InputValidator class: this.availableValidators have to be initialized in the derived class');\r\n    }\r\n    if (!Array.isArray(this.validatorSequence)) {\r\n      throw new Error('InputValidator class: this.validatorSequence have to be initialized in the derived class');\r\n    }\r\n\r\n    this.availableValidators.required = this.required.bind(this);\r\n\r\n    this.currentValidators = [];\r\n    const paramSequence = this.getValidatorParamSequence(validatorsToApply);\r\n    paramSequence.forEach(param => {\r\n      const config: inputMsg.ValidatorConfig<any> = {\r\n        name: param.name,\r\n        value: param.value,\r\n        set: param.set,\r\n        fn: this.availableValidators[param.name]\r\n      };\r\n      this.currentValidators.push(config);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns the sequence of configs of validators\r\n   */\r\n  private getValidatorParamSequence<T>(validatorsToApply: { [key: string]: inputMsg.ValidatorParam }): inputMsg.ValidatorParam[] {\r\n\r\n    const config: inputMsg.ValidatorParam[] = [];\r\n    this.validatorSequence.forEach(name => {\r\n      if (validatorsToApply[name]) {\r\n        config.push(validatorsToApply[name]);\r\n      }\r\n    });\r\n    return config;\r\n  }\r\n\r\n  /**\r\n   * Validation function to be used with an any type of an input element\r\n   */\r\n  private required(value: string): { required: true } | null {\r\n    return this.empty(value) ? { required: true } : null;\r\n  }\r\n\r\n}\r\n","import { InputValidator } from '../models/input-validator';\r\n\r\nimport { inputMsg } from '../types';\r\n\r\nexport class EmailValidator extends InputValidator {\r\n\r\n  protected availableValidators = {\r\n    email: this.email\r\n  };\r\n  protected validatorSequence = ['required', 'email'];\r\n\r\n  constructor(\r\n    private validatorsToApply: { [key: string]: inputMsg.ValidatorParam }\r\n  ) {\r\n    super();\r\n    super.setCurrentValidators(validatorsToApply);\r\n  }\r\n\r\n  private email(value: string): { email: string } | null {\r\n\r\n    /**\r\n     * We should skip the validation for empty values.\r\n     * Consider the case when a client sets an optional\r\n     * email input that should be validated\r\n     * only if a user inputs some text.\r\n     */\r\n    if (super.empty(value)) {\r\n      return { email: null };\r\n    }\r\n    // http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\r\n    // tslint:disable-next-line:max-line-length\r\n    const regExp = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    const isValid: boolean = regExp.test(value);\r\n\r\n    return isValid ? null : { email: value };\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { EmailValidator } from './email-validator';\r\n\r\nimport { inputMsg } from '../types';\r\n\r\n@Injectable()\r\nexport class EmailValidatorFactory implements inputMsg.InputValidatorFactory {\r\n\r\n  public create(validatorsToApply: { [key: string]: inputMsg.ValidatorParam }): EmailValidator {\r\n    return new EmailValidator(validatorsToApply);\r\n  }\r\n\r\n}\r\n","import { Directive, ElementRef } from '@angular/core';\r\nimport { NG_VALIDATORS } from '@angular/forms';\r\n\r\nimport { AbstractInput } from '../models/abstract-input';\r\nimport { EmailValidatorFactory } from './email-validator-factory.service';\r\nimport { InputStorageService } from '../input-storage.service';\r\n\r\n@Directive({\r\n  selector: 'input[ngxInputEmail]',\r\n  providers: [\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: InputEmailDirective,\r\n      multi: true\r\n    },\r\n    EmailValidatorFactory\r\n  ]\r\n})\r\nexport class InputEmailDirective extends AbstractInput {\r\n\r\n  protected validatorOptions = {\r\n    email: () => {\r\n      // The email validator is always set by default\r\n      return {\r\n        name: 'email',\r\n        set: true\r\n      };\r\n    }\r\n  };\r\n\r\n  constructor(\r\n    protected elemRef: ElementRef,\r\n    protected inputStorageService: InputStorageService,\r\n    protected validatorFactory: EmailValidatorFactory\r\n  ) {\r\n    super(elemRef, inputStorageService, validatorFactory);\r\n  }\r\n\r\n}\r\n","import { AbstractControl } from '@angular/forms';\r\n\r\nimport { InputValidator } from '../models/input-validator';\r\n\r\nimport { inputMsg } from '../types';\r\n\r\nexport class NumberValidator extends InputValidator {\r\n\r\n  protected availableValidators = {\r\n    integer: this.integer.bind(this),\r\n    max: this.max.bind(this),\r\n    min: this.min.bind(this)\r\n  };\r\n  protected validatorSequence = ['required', 'integer', 'min', 'max'];\r\n\r\n  constructor(\r\n    private validatorsToApply: { [key: string]: inputMsg.ValidatorParam }\r\n  ) {\r\n    super();\r\n    super.setCurrentValidators(validatorsToApply);\r\n  }\r\n\r\n  private integer(value: number): { integer: any } | null {\r\n\r\n    if (!this.number(value)) {\r\n      return { integer: 'Not a number' };\r\n    }\r\n    const integer: boolean = Math.floor(value) === value;\r\n    return integer ? null : { integer: value };\r\n  }\r\n\r\n  private max(value: number, max: number): { max: any } | null {\r\n\r\n    if (!this.number(value)) {\r\n      return { max: 'Not a number' };\r\n    }\r\n    if (value > max) {\r\n      const error = {\r\n        max: value === 0 ? '0' : value\r\n      };\r\n      return error;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private min(value: number, min: number): { min: any } | null {\r\n\r\n    if (!this.number(value)) {\r\n      return { min: 'Not a number' };\r\n    }\r\n    if (value < min) {\r\n      const error = {\r\n        min: value === 0 ? '0' : value\r\n      };\r\n      return error;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private number(arg: any): boolean {\r\n    return !isNaN(parseFloat(arg)) && isFinite(arg);\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { NumberValidator } from './number-validator';\r\n\r\nimport { inputMsg } from '../types';\r\n\r\n@Injectable()\r\nexport class NumberValidatorFactory implements inputMsg.InputValidatorFactory {\r\n\r\n  public create(validatorsToApply: { [key: string]: inputMsg.ValidatorParam }): NumberValidator {\r\n    return new NumberValidator(validatorsToApply);\r\n  }\r\n\r\n}\r\n","import { Directive, ElementRef, Input } from '@angular/core';\r\nimport { NG_VALIDATORS } from '@angular/forms';\r\n\r\nimport { AbstractInput } from '../models/abstract-input';\r\nimport { InputStorageService } from '../input-storage.service';\r\nimport { NumberValidatorFactory } from './number-validator-factory.service';\r\n\r\n@Directive({\r\n  selector: 'input[ngxInputNumber][type=\"number\"]',\r\n  providers: [\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: InputNumberDirective,\r\n      multi: true\r\n    },\r\n    NumberValidatorFactory\r\n  ]\r\n})\r\nexport class InputNumberDirective extends AbstractInput {\r\n\r\n  @Input() public integer: '' | boolean;\r\n  @Input() public max: string | number;\r\n  @Input() public min: string | number;\r\n\r\n  protected validatorOptions = {\r\n    integer: () => {\r\n      return {\r\n        name: 'integer',\r\n        set: super.hasBoolaenParam('integer')\r\n      };\r\n    },\r\n    max: () => {\r\n      return {\r\n        name: 'max',\r\n        set: super.hasNumberParam('max'),\r\n        value: +this.max\r\n      };\r\n    },\r\n    min: () => {\r\n      return {\r\n        name: 'min',\r\n        set: super.hasNumberParam('min'),\r\n        value: +this.min\r\n      };\r\n    }\r\n  };\r\n\r\n  constructor(\r\n    protected elemRef: ElementRef,\r\n    protected inputStorageService: InputStorageService,\r\n    protected validatorFactory: NumberValidatorFactory\r\n  ) {\r\n    super(elemRef, inputStorageService, validatorFactory);\r\n  }\r\n\r\n}\r\n","import { InputValidator } from '../models/input-validator';\r\n\r\nimport { inputMsg } from '../types';\r\n\r\n/**\r\n * Validates 'text' like input element.\r\n */\r\nexport class TextValidator extends InputValidator {\r\n\r\n  /**\r\n   * Note, 'minlength' and 'maxlength' validators\r\n   * are already supported by Angular NgForm, but\r\n   * we should emplement them to stop the validation\r\n   * process when the first validator fails.\r\n   * See: InputValidator.validate() implementation.\r\n   */\r\n  protected availableValidators = {\r\n    maxlength: this.maxlength,\r\n    minlength: this.minlength,\r\n    pattern: this.pattern\r\n  };\r\n  protected validatorSequence = ['required', 'minlength', 'maxlength', 'pattern'];\r\n\r\n  constructor(\r\n    private validatorsToApply: { [key: string]: inputMsg.ValidatorParam }\r\n  ) {\r\n    super();\r\n    super.setCurrentValidators(validatorsToApply);\r\n  }\r\n\r\n  private maxlength(value: string, max: number): { maxlength: string } | null {\r\n    if (super.empty(value)) {\r\n      return null;\r\n    }\r\n    return value.length > max ? { maxlength: value } : null;\r\n  }\r\n\r\n  private minlength(value: string, min: number): { minlength: string } | null {\r\n\r\n    if (value === null || typeof value === 'undefined') {\r\n      return null;\r\n    }\r\n    if (value === '') {\r\n      return { minlength: 'empty' };\r\n    }\r\n    return value.length < min ? { minlength: value } : null;\r\n  }\r\n\r\n  private pattern(value: string, regExp: RegExp): { pattern: string } | null {\r\n    if (super.empty(value)) {\r\n      return { pattern: 'empty' };\r\n    }\r\n    return regExp.test(value) ? null : { pattern: value };\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { TextValidator } from './text-validator';\r\n\r\nimport { inputMsg } from '../types';\r\n\r\n@Injectable()\r\nexport class TextValidatorFactory implements inputMsg.InputValidatorFactory {\r\n\r\n  public create(validatorsToApply: { [key: string]: inputMsg.ValidatorParam }): TextValidator {\r\n    return new TextValidator(validatorsToApply);\r\n  }\r\n\r\n}\r\n","import { Directive, ElementRef, Input, OnInit, OnChanges, OnDestroy, SimpleChange } from '@angular/core';\r\nimport { NG_VALIDATORS } from '@angular/forms';\r\n\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { AbstractInput } from '../models/abstract-input';\r\nimport { InputStorageService } from '../input-storage.service';\r\nimport { TextValidatorFactory } from './text-validator-factory.service';\r\n\r\n@Directive({\r\n  selector: 'input[ngxInputText], textarea[ngxInputText]',\r\n  providers: [\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: InputTextDirective,\r\n      multi: true\r\n    },\r\n    TextValidatorFactory\r\n  ]\r\n})\r\n\r\nexport class InputTextDirective extends AbstractInput implements OnChanges, OnInit, OnDestroy {\r\n\r\n  @Input() public maxlength: string | number;\r\n  @Input() public minlength: string | number;\r\n  @Input() public pattern: RegExp;\r\n\r\n  protected validatorOptions = {\r\n    maxlength: () => {\r\n      return {\r\n        name: 'maxlength',\r\n        set: super.hasNumberParam('maxlength'),\r\n        value: +this.maxlength\r\n      };\r\n    },\r\n    minlength: () => {\r\n      return {\r\n        name: 'minlength',\r\n        set: super.hasNumberParam('minlength'),\r\n        value: +this.minlength\r\n      };\r\n    },\r\n    pattern: () => {\r\n      return {\r\n        name: 'pattern',\r\n        set: this.pattern instanceof RegExp,\r\n        value: this.pattern\r\n      };\r\n    }\r\n  };\r\n\r\n  private maxLengthSub: Subscription;\r\n\r\n  constructor(\r\n    protected elemRef: ElementRef,\r\n    protected inputStorageService: InputStorageService,\r\n    protected validatorFactory: TextValidatorFactory\r\n  ) {\r\n    super(elemRef, inputStorageService, validatorFactory);\r\n  }\r\n\r\n  public ngOnChanges(changes: { [prop: string]: SimpleChange }): void {\r\n    super.ngOnChanges(changes);\r\n    this.maxLengthOn();\r\n  }\r\n\r\n  public ngOnDestroy(): void {\r\n    super.ngOnDestroy();\r\n    this.maxLengthOff();\r\n  }\r\n\r\n  public ngOnInit(): void {\r\n    super.ngOnInit();\r\n    this.maxLengthOn();\r\n  }\r\n\r\n  private emitMaxLengthStatus(): void {\r\n    if (this.model.value.length === +this.maxlength) {\r\n      this.inputParams.status.next('maxlength');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stops generating 'maxlength' status\r\n   */\r\n  private maxLengthOff(): void {\r\n    if (this.maxLengthSub) {\r\n      this.maxLengthSub.unsubscribe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Starts generating 'maxlength' status\r\n   */\r\n  private maxLengthOn(): void {\r\n    if (super.hasNumberParam('maxlength') && !this.maxLengthSub) {\r\n      this.maxLengthSub = this.model.valueChanges\r\n        .subscribe(this.emitMaxLengthStatus.bind(this));\r\n    }\r\n  }\r\n\r\n}\r\n","import { Directive, Input, OnInit, OnDestroy, ElementRef } from '@angular/core';\r\n\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport { InputMsgConfigService } from '../input-msg-config.service';\r\nimport { InputStorageService } from '../input-storage.service';\r\n\r\nimport { inputMsg } from '../types';\r\n\r\n/**\r\n * Adds/removes 'ngx-input_invalid' css class\r\n * when input status changes\r\n */\r\n@Directive({\r\n  selector: '[ngxLabel]'\r\n})\r\nexport class LabelDirective implements OnInit, OnDestroy {\r\n\r\n  /**\r\n   * input element id or name\r\n   */\r\n  @Input() public for: string;\r\n\r\n  private elem: HTMLLabelElement;\r\n  private highlightColor: string;\r\n  private valid: BehaviorSubject<boolean>;\r\n\r\n  constructor(\r\n    private configService: InputMsgConfigService,\r\n    private elemRef: ElementRef,\r\n    private inputStorageService: InputStorageService\r\n  ) { }\r\n\r\n  public ngOnDestroy(): void {\r\n    if (this.valid && this.valid.unsubscribe) {\r\n      this.valid.unsubscribe();\r\n    }\r\n  }\r\n\r\n  public ngOnInit(): void {\r\n\r\n    this.elem = this.elemRef.nativeElement;\r\n    this.highlightColor = this.configService.get().colors.error;\r\n\r\n    if (!this.for) {\r\n      throw new Error('ngxLabel directive: \\'for\\' attribute with input id or name is required.');\r\n    }\r\n\r\n    this.setAnimation();\r\n\r\n    // Wait till the input element will be initialized.\r\n    // We should wait in case the label element was\r\n    // inserted before the input.\r\n    setTimeout(() => {\r\n      const inputParams = this.inputStorageService.get(this.for);\r\n      if (!inputParams) {\r\n        throw new Error(`ngxLabel directive: can\\'t find the input element with id or name: ${this.for}`);\r\n      }\r\n\r\n      this.valid = inputParams.valid;\r\n      this.valid.subscribe((valid: boolean) => {\r\n        this.toggleClassOnValidChange(valid);\r\n        this.highlightOnValidChange(valid);\r\n      });\r\n\r\n    }, 0);\r\n  }\r\n\r\n  private highlightOnValidChange(valid: boolean): void {\r\n    if (valid) {\r\n      this.elem.style.color = '';\r\n    } else {\r\n      this.elem.style.color = this.highlightColor;\r\n    }\r\n  }\r\n\r\n  private setAnimation(): void {\r\n    this.elem.style.transition = 'color 250ms ease-in';\r\n  }\r\n\r\n  private toggleClassOnValidChange(valid: boolean): void {\r\n    if (valid) {\r\n      this.elem.classList.remove('ngx-input_invalid');\r\n    } else {\r\n      this.elem.classList.add('ngx-input_invalid');\r\n    }\r\n  }\r\n\r\n}\r\n","import { Component, Input, OnInit, OnChanges, OnDestroy, SimpleChange, ViewEncapsulation } from '@angular/core';\r\nimport { trigger, state, style, animate, transition } from '@angular/animations';\r\n\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { InputMsgConfigService } from '../input-msg-config.service';\r\nimport { InputStorageService } from '../input-storage.service';\r\n\r\nimport { inputMsg } from '../types';\r\n\r\n\r\n/**\r\n * Displays a message for an input element\r\n * depending on it`s validation status.\r\n */\r\n@Component({\r\n  selector: 'ngx-msg',\r\n  template: `<div class=\"ngx-msg__container\" \r\n  [ngClass]=\"getClasses()\"\r\n  [ngStyle]=\"getStyles()\"\r\n  >\r\n\r\n  <span *ngIf=\"currentMsg\" [@msgAnimation]>\r\n    {{currentMsg}}\r\n  </span>\r\n\r\n</div>\r\n`,\r\n  styles: [`.ngx-msg__mat-form-field{margin-bottom:16px;width:100%}.ngx-msg__container{display:block;font-size:12px;min-height:20px;margin-top:3px}.ngx-msg_material{margin-top:-33px}.ngx-msg_pos_bottom-left{text-align:left}.ngx-msg_pos_bottom-right{text-align:right}`],\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations: [\r\n    trigger('msgAnimation', [\r\n      state('active', style({ opacity: 1 })),\r\n      transition('void => *', [\r\n        style({ opacity: 0 }),\r\n        animate('250ms ease-in', style({ opacity: 1 }))\r\n      ]),\r\n      transition('* => void', [\r\n        style({ opacity: 1 }),\r\n        animate('250ms ease-in', style({ opacity: 0 }))\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class MsgComponent implements OnInit, OnChanges, OnDestroy {\r\n\r\n  /**\r\n   * An input id or name attribute\r\n   */\r\n  @Input() public for: string;\r\n  /**\r\n   * Optional params with custom messages\r\n   * to overwrite the default ones\r\n   */\r\n  @Input() public email: string | inputMsg.MsgFn;\r\n  @Input() public integer: string | inputMsg.MsgFn;\r\n  @Input() public max: string | inputMsg.MsgFn;\r\n  @Input() public maxlength: string | inputMsg.MsgFn;\r\n  @Input() public min: string | inputMsg.MsgFn;\r\n  @Input() public minlength: string | inputMsg.MsgFn;\r\n  @Input() public pattern: string | inputMsg.MsgFn;\r\n  @Input() public position: inputMsg.Position;\r\n  @Input() public required: string | inputMsg.MsgFn;\r\n\r\n  // Currently shown message\r\n  public currentMsg: string;\r\n\r\n  private currentStatus: inputMsg.InputStatus;\r\n  private defaultConfig: inputMsg.Config;\r\n  private inputParams: inputMsg.InputParams;\r\n  /**\r\n   * All available messages corresponded\r\n   * to validation params of the input\r\n   */\r\n  private messages: inputMsg.ResultMsg = {};\r\n  private subscriptions: Subscription[] = [];\r\n\r\n  constructor(\r\n    private configService: InputMsgConfigService,\r\n    private storageService: InputStorageService\r\n  ) { }\r\n\r\n  public getClasses(): { [name: string]: boolean } {\r\n\r\n    const position: 'bottom-left' | 'bottom-right' = this.position || this.configService.get().position;\r\n    return {\r\n      'ngx-msg_pos_bottom-left': position === 'bottom-left',\r\n      'ngx-msg_pos_bottom-right': position === 'bottom-right',\r\n      'ngx-msg_color_tooltip': this.currentStatus === 'maxlength',\r\n      'ngx-msg_material': this.inputParams.material\r\n    };\r\n  }\r\n\r\n  public getStyles(): { [name: string]: string } {\r\n\r\n    let color: string;\r\n    if (this.currentStatus === 'maxlength') {\r\n      color = this.defaultConfig.colors.maxlength;\r\n    } else {\r\n      color = this.defaultConfig.colors.error;\r\n    }\r\n    return { color: color };\r\n  }\r\n\r\n  public ngOnChanges(changes: { [prop: string]: SimpleChange }): void {\r\n\r\n    const changeableProps = {\r\n      email: true,\r\n      integer: true,\r\n      max: true,\r\n      maxlength: true,\r\n      min: true,\r\n      minlength: true,\r\n      position: true,\r\n      required: true\r\n    };\r\n\r\n    Object.keys(changes).forEach(name => {\r\n      if (!changeableProps[name] || changes[name].isFirstChange()) {\r\n        return;\r\n      }\r\n      this.setMessage(name as inputMsg.ValidatorName);\r\n\r\n      // update currentMsg if it has been changed\r\n      // and the input is invalid\r\n      if (this.currentStatus === name && name !== 'maxlength') {\r\n        this.currentMsg = this.messages[name];\r\n      }\r\n    });\r\n  }\r\n\r\n  public ngOnDestroy(): void {\r\n    this.subscriptions.forEach(sub => sub.unsubscribe());\r\n  }\r\n\r\n  public ngOnInit(): void {\r\n\r\n    this.defaultConfig = this.configService.get();\r\n\r\n    if (!this.for) {\r\n      throw new Error('ngxMsg component: \\'for\\' parameter with the input id or name must be provided.');\r\n    }\r\n\r\n    this.inputParams = this.storageService.get(this.for);\r\n    if (!this.inputParams) {\r\n      throw new Error(`ngxMsg component: can\\'t find the input element with id or name: ${this.for}`);\r\n    }\r\n\r\n    // Set default or custom messages for given validation params\r\n    this.setAllMessages();\r\n\r\n    // Listen to the input status\r\n    const statusSub: Subscription = this.inputParams.status\r\n      .subscribe(this.onStatusChange.bind(this));\r\n    this.subscriptions.push(statusSub);\r\n\r\n    // Listen to the input params change\r\n    const inputParamsChangeSub: Subscription = this.inputParams.paramChange\r\n      .subscribe(this.onInputParamsChange.bind(this));\r\n    this.subscriptions.push(inputParamsChangeSub);\r\n  }\r\n\r\n  // Updates messages when input params change\r\n  private onInputParamsChange(changedPropName: 'label' | inputMsg.ValidatorName): void {\r\n\r\n    if (changedPropName === 'label') {\r\n      this.setAllMessages();\r\n    } else {\r\n      this.setMessage(changedPropName as inputMsg.ValidatorName);\r\n    }\r\n\r\n    // update current msg if the input is invalid\r\n    if (this.currentStatus === 'pristine' ||\r\n      this.currentStatus === 'valid' ||\r\n      this.currentStatus === 'maxlength') {\r\n      return;\r\n    }\r\n    this.currentMsg = this.messages[this.currentStatus];\r\n  }\r\n\r\n  // Updates currentStatus and shows/hides currentMsg\r\n  private onStatusChange(status: inputMsg.InputStatus): void {\r\n\r\n    this.currentStatus = status;\r\n    switch (status) {\r\n      case 'pristine':\r\n        this.currentMsg = '';\r\n        break;\r\n      case 'valid':\r\n        this.currentMsg = '';\r\n        break;\r\n      case 'maxlength':\r\n        this.currentMsg = this.messages[status];\r\n        setTimeout(() => { this.currentMsg = ''; }, 2000);\r\n        break;\r\n      default:\r\n        this.currentMsg = this.messages[status];\r\n    }\r\n  }\r\n\r\n  private setAllMessages(): void {\r\n    Object.keys(this.inputParams.validationParams).forEach((name: inputMsg.ValidatorName) => {\r\n      this.setMessage(name);\r\n    });\r\n  }\r\n\r\n  // Sets message text for a given validation parameter.\r\n  // If appropriate message expression is not provided\r\n  // throgh @Input() binding - the default one is used instead.\r\n  private setMessage(name: inputMsg.ValidatorName): void {\r\n\r\n    if (!this.inputParams.validationParams[name]) {\r\n      return;\r\n    }\r\n\r\n    // helper type guard\r\n    const isFn = (arg: string | Function): arg is inputMsg.MsgFn => {\r\n      return typeof arg === 'function';\r\n    };\r\n\r\n    // get specific or default msgExpression\r\n    let msgExpression: inputMsg.MsgFn | string;\r\n    if (typeof this[name] !== 'undefined') {\r\n      msgExpression = this[name] as inputMsg.MsgFn | string;\r\n    } else {\r\n      msgExpression = this.defaultConfig.msg[name] as inputMsg.MsgFn | string;\r\n    }\r\n\r\n    // Set a message generated by MsgFn() or as a simle string\r\n    if (isFn(msgExpression)) {\r\n      this.messages[name] = msgExpression(this.inputParams.label, this.inputParams.validationParams[name].value);\r\n    } else {\r\n      this.messages[name] = msgExpression;\r\n    }\r\n\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { InputMsgConfigService } from './input-msg-config.service';\r\nimport { InputStorageService } from './input-storage.service';\r\n\r\nimport { InputEmailDirective } from './input-email/input-email.directive';\r\nimport { InputNumberDirective } from './input-number/input-number.directive';\r\nimport { InputTextDirective } from './input-text/input-text.directive';\r\nimport { LabelDirective } from './label/label.directive';\r\nimport { MsgComponent } from './msg/msg.component';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    BrowserAnimationsModule,\r\n    CommonModule,\r\n    FormsModule\r\n  ],\r\n  declarations: [\r\n    InputEmailDirective,\r\n    InputNumberDirective,\r\n    InputTextDirective,\r\n    LabelDirective,\r\n    MsgComponent\r\n  ],\r\n  providers: [\r\n    InputMsgConfigService,\r\n    InputStorageService\r\n  ],\r\n  exports: [\r\n    InputEmailDirective,\r\n    InputNumberDirective,\r\n    InputTextDirective,\r\n    LabelDirective,\r\n    MsgComponent\r\n  ]\r\n})\r\n\r\nexport class InputMsgModule { }\r\n"],"names":[],"mappings":"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"}
