{"version":3,"sources":["ng://ngx-input-msg/lib/input-msg-config.service.ts","ng://ngx-input-msg/lib/input-storage.service.ts","null","ng://ngx-input-msg/lib/models/from-event-mock.ts","ng://ngx-input-msg/lib/models/abstract-input.ts","ng://ngx-input-msg/lib/models/input-validator.ts","ng://ngx-input-msg/lib/input-email/email-validator.ts","ng://ngx-input-msg/lib/input-email/email-validator-factory.service.ts","ng://ngx-input-msg/lib/input-email/input-email.directive.ts","ng://ngx-input-msg/lib/input-number/number-validator.ts","ng://ngx-input-msg/lib/input-number/number-validator-factory.service.ts","ng://ngx-input-msg/lib/input-number/input-number.directive.ts","ng://ngx-input-msg/lib/input-text/text-validator.ts","ng://ngx-input-msg/lib/input-text/text-validator-factory.service.ts","ng://ngx-input-msg/lib/input-text/input-text.directive.ts","ng://ngx-input-msg/lib/label/label.directive.ts","ng://ngx-input-msg/lib/msg/msg.component.ts","ng://ngx-input-msg/lib/input-msg.module.ts"],"names":["colors","error","maxlength","position","msg","email","label","integer","max","allowed","min","minlength","pattern","required","InputMsgConfigService","prototype","get","this","defaultConfig","set","config","Object","keys","forEach","key","_this","Injectable","InputStorageService","storageById","storageByName","remove","removeFromSpecificStorage","input","id","name","storage","extendStatics","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__extends","__","constructor","create","__values","o","m","Symbol","iterator","i","call","next","length","value","done","AbstractInput","elemRef","inputStorageService","inputValidatorFactory","ngOnChanges","changes","changeableProps","placeholder","validatorOptions","isFirstChange","inputParams","currentValue","paramChange","setValidationParams","createValidator","model","control","updateValueAndValidity","ngOnDestroy","statusOff","inputKey","ngOnInit","elem","nativeElement","isMaterial","matInput","checkRequiredParams","setMatFormFieldClass","initInputParams","setTimeout","form","Error","statusOn","validate","validator","hasBoolaenParam","hasNumberParam","isNaN","isFinite","NgModel","validators","validatorParams","param","material","Subject","status","BehaviorSubject","valid","validationParams","undefined","parent","parentElement","tagName","classList","add","requiredParam","push","statusSubscriptions","sub","unsubscribe","eventTarget","eventName","handler","emitErrorStatus","_a","tslib_1.__values","_b","hasError","emitErrorStatusOnTouched","touched","submitted","blurSub","addEventListener","removeEventListener","controlValueSub","valueChanges","subscribe","formSubmitSub","ngSubmit","controlStatusSub","statusChanges","prevValid","validSub","Input","InputValidator","result","currentValidators","fn","empty","setCurrentValidators","validatorsToApply","availableValidators","isArray","validatorSequence","bind","getValidatorParamSequence","EmailValidator","_super","tslib_1.__extends","test","EmailValidatorFactory","InputEmailDirective","validatorFactory","Directive","args","selector","providers","provide","NG_VALIDATORS","useExisting","multi","ElementRef","NumberValidator","number","Math","floor","arg","parseFloat","NumberValidatorFactory","InputNumberDirective","TextValidator","regExp","TextValidatorFactory","InputTextDirective","RegExp","maxLengthOn","maxLengthOff","emitMaxLengthStatus","maxLengthSub","LabelDirective","configService","highlightColor","for","setAnimation","toggleClassOnValidChange","highlightOnValidChange","style","color","transition","MsgComponent","storageService","getClasses","ngx-msg_pos_bottom-left","ngx-msg_pos_bottom-right","ngx-msg_color_tooltip","currentStatus","ngx-msg_material","getStyles","setMessage","currentMsg","messages","subscriptions","setAllMessages","statusSub","onStatusChange","inputParamsChangeSub","onInputParamsChange","changedPropName","msgExpression","Component","template","styles","encapsulation","ViewEncapsulation","None","animations","trigger","state","opacity","animate","InputMsgModule","NgModule","imports","BrowserAnimationsModule","CommonModule","FormsModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\nimport { inputMsg } from './types';\r\n\r\n/**\r\n * Provides configuration for displaying messages.\r\n */\r\n@Injectable()\r\nexport class InputMsgConfigService {\r\n\r\n  private defaultConfig: inputMsg.Config = {\r\n    colors: {\r\n      error: '#f44336',\r\n      maxlength: 'grey'\r\n    },\r\n    position: 'bottom-left',\r\n    msg: {\r\n      email: (label: string) => `Wrong ${label}`,\r\n      integer: 'Fractional digits are forbidden',\r\n      max: (label: string, allowed: number) => `Maximum allowed ${label} is ${allowed}`,\r\n      min: (label: string, allowed: number) => `Minimum allowed ${label} is ${allowed}`,\r\n      maxlength: (label: string, allowed: number) => `Maximum ${allowed} chars limit was reached`,\r\n      minlength: (label: string, allowed: number) => `At least ${allowed} chars length are required`,\r\n      pattern: (label: string) => `Invalid ${label}`,\r\n      required: (label: string) => `${label} is required`\r\n    }\r\n  };\r\n\r\n  public get(): inputMsg.Config {\r\n    return this.defaultConfig;\r\n  }\r\n\r\n  public set(config: inputMsg.Config) {\r\n\r\n    if (config.position) {\r\n      this.defaultConfig.position = config.position;\r\n    }\r\n\r\n    // set colors\r\n    if (config.colors) {\r\n      Object.keys(config.colors).forEach((key: string) => {\r\n        this.defaultConfig.colors[key] = config.colors[key];\r\n      });\r\n    }\r\n\r\n    // set msg\r\n    if (!config.msg) {\r\n      return;\r\n    }\r\n    Object.keys(config.msg).forEach((key: string) => {\r\n      this.defaultConfig.msg[key] = config.msg[key];\r\n    });\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { inputMsg } from './types';\r\n\r\n/**\r\n * This utility service stores input element params\r\n * for communication between ngxInput directive,\r\n * ngx-msg component and ngxLabel directive.\r\n */\r\n@Injectable()\r\nexport class InputStorageService {\r\n\r\n  private storageById: {\r\n    [id: string]: inputMsg.InputParams\r\n  } = {};\r\n\r\n  /**\r\n   * Note, this storage is provided, because\r\n   * user might set id or name attribute to\r\n   * the input element or even both of them.\r\n   */\r\n  private storageByName: {\r\n    [id: string]: inputMsg.InputParams\r\n  } = {};\r\n\r\n  public get(key: string): inputMsg.InputParams {\r\n    return this.storageById[key] || this.storageByName[key];\r\n  }\r\n\r\n  public remove(key: string): void {\r\n    this.removeFromSpecificStorage('storageById', key);\r\n    this.removeFromSpecificStorage('storageByName', key);\r\n  }\r\n\r\n  public set(input: inputMsg.InputParams, id?: string, name?: string): void {\r\n    if (id) {\r\n      this.storageById[id] = input;\r\n    }\r\n    if (name) {\r\n      this.storageByName[name] = input;\r\n    }\r\n  }\r\n\r\n\r\n  private removeFromSpecificStorage(storage: 'storageById' | 'storageByName', key: string): void {\r\n    if (!this[storage][key]) {\r\n      return;\r\n    }\r\n    delete this[storage][key];\r\n  }\r\n\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\r\n * This temporary surrogate replaces\r\n * original rxjs fromEvent function\r\n * to handle rxjs v5 to v6 migration problem.\r\n */\r\nexport const fromEventMock = (eventTarget: HTMLElement, eventName: string, handler: () => void): { unsubscribe: () => void; } => {\r\n\r\n  eventTarget.addEventListener(eventName, handler);\r\n  return {\r\n    unsubscribe: () => {\r\n      eventTarget.removeEventListener(eventName, handler);\r\n    }\r\n  };\r\n\r\n};\r\n","import { ElementRef, Input, OnInit, OnChanges, OnDestroy, SimpleChange } from '@angular/core';\r\nimport { AbstractControl, NgModel, NgForm } from '@angular/forms';\r\n\r\nimport { BehaviorSubject, Subject, Subscription } from 'rxjs';\r\n// rxjs v5/v6 compatible\r\nimport { fromEventMock } from './from-event-mock';\r\n\r\nimport { InputStorageService } from '../input-storage.service';\r\n\r\n// types\r\nimport { inputMsg } from '../types';\r\n\r\n/**\r\n * An abstract class to be derived by\r\n * a concrete input directive class.\r\n * Validates an input element and emits\r\n * the validation status to the listeners\r\n * (MsgComponent, LabelDirective)\r\n * through InputStorageService.\r\n */\r\nexport abstract class AbstractInput implements OnInit, OnChanges, OnDestroy {\r\n\r\n  @Input() public id: string;\r\n  @Input() public label: string;\r\n  @Input() public matInput: '';\r\n  @Input() public model: NgModel;\r\n  @Input() public name: string;\r\n  @Input() public placeholder: string;\r\n  @Input() public required: '' | boolean;\r\n\r\n  protected inputParams: inputMsg.InputParams;\r\n  /**\r\n   * A dictionary with callbacks to get current validation params.\r\n   */\r\n  protected abstract validatorOptions: { [name: string]: inputMsg.ValidatorParamFn };\r\n\r\n  private elem: HTMLInputElement;\r\n  private form: NgForm;\r\n  private inputKey: string;\r\n  private isMaterial: boolean;\r\n  /**\r\n   * Contains true if the prevoius input state was valid.\r\n   */\r\n  private prevValid: boolean;\r\n  private statusSubscriptions: Subscription[] = [];\r\n  /**\r\n   * The current validation params of the input\r\n   */\r\n  private validatorParams: inputMsg.ValidatorParam[];\r\n  private validator: inputMsg.InputValidator;\r\n\r\n  constructor(\r\n    protected elemRef: ElementRef,\r\n    protected inputStorageService: InputStorageService,\r\n    protected inputValidatorFactory: inputMsg.InputValidatorFactory\r\n  ) { }\r\n\r\n  public ngOnChanges(changes: { [prop: string]: SimpleChange }): void {\r\n\r\n    const changeableProps = {\r\n      placeholder: true,\r\n      label: true,\r\n      required: true\r\n    };\r\n\r\n    Object.keys(changes).forEach((name) => {\r\n      if (!changeableProps[name] ||\r\n        !this.validatorOptions[name] ||\r\n        changes[name].isFirstChange()\r\n      ) {\r\n        return;\r\n      }\r\n\r\n      if (name === 'placeholder' || name === 'label') {\r\n        this.inputParams.label = changes[name].currentValue;\r\n        this.inputParams.paramChange.next('label');\r\n        return;\r\n      }\r\n\r\n      this.setValidationParams();\r\n      this.inputParams.paramChange.next(name as inputMsg.ValidatorName);\r\n      this.createValidator();\r\n      this.model.control.updateValueAndValidity();\r\n    });\r\n  }\r\n\r\n  public ngOnDestroy(): void {\r\n    this.statusOff();\r\n    this.inputStorageService.remove(this.inputKey);\r\n  }\r\n\r\n  public ngOnInit(): void {\r\n\r\n    this.elem = this.elemRef.nativeElement;\r\n    this.isMaterial = this.matInput === '';\r\n    this.inputKey = this.id || this.name;\r\n\r\n    this.checkRequiredParams();\r\n\r\n    this.setMatFormFieldClass();\r\n\r\n    this.initInputParams();\r\n    this.setValidationParams();\r\n    this.createValidator();\r\n    this.inputStorageService.set(this.inputParams, this.id, this.name);\r\n\r\n    // Wait till NgForm will be initialized\r\n    setTimeout(() => {\r\n      this.form = this.model.formDirective as NgForm;\r\n      if (!this.form) {\r\n        throw new Error(`ngxInput directive: the element with name=\"${this.name}\" have to be inside a <form> element`);\r\n      }\r\n      this.statusOn();\r\n    }, 0);\r\n  }\r\n\r\n  public validate(control: AbstractControl): { [validatorName: string]: any } | null {\r\n    return this.validator.validate(control);\r\n  }\r\n\r\n  protected hasBoolaenParam(name: string): boolean {\r\n    return this[name] === '' || this[name] === true;\r\n  }\r\n\r\n  protected hasNumberParam(name: string): boolean {\r\n    return !isNaN(this[name]) && isFinite(this[name]);\r\n  }\r\n\r\n  private checkRequiredParams(): void {\r\n    if (!this.name) {\r\n      throw new Error(`ngxInput directive: can\\'t find name attribute on the element`);\r\n    }\r\n    if (!(this.model instanceof NgModel)) {\r\n      throw new Error(`ngxInput directive: NgModel instance have to be provided to [model] param of the element`);\r\n    }\r\n  }\r\n\r\n  private createValidator(): void {\r\n\r\n    const validators: { [validatorName: string]: inputMsg.ValidatorParam } = {};\r\n    this.validatorParams.forEach(param => {\r\n      validators[param.name] = param;\r\n    });\r\n\r\n    this.validator = this.inputValidatorFactory.create(validators);\r\n  }\r\n\r\n  private initInputParams(): void {\r\n\r\n    this.inputParams = {\r\n      label: this.placeholder || this.label,\r\n      material: this.isMaterial,\r\n      paramChange: new Subject(),\r\n      status: new BehaviorSubject('pristine' as inputMsg.InputStatus),\r\n      valid: new BehaviorSubject(true),\r\n      validationParams: undefined\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Sets 'ngx-msg__mat-form-field'\r\n   * if matInput directive was set\r\n   */\r\n  private setMatFormFieldClass(): void {\r\n\r\n    if (!this.isMaterial) {\r\n      return;\r\n    }\r\n    const input = this.elemRef.nativeElement as HTMLInputElement;\r\n    let parent: HTMLElement = input.parentElement;\r\n\r\n    for (let i = 0; i < 10; i++) {\r\n      if (parent.tagName === 'MAT-FORM-FIELD') {\r\n        break;\r\n      }\r\n      parent = parent.parentElement;\r\n      if (i === 9) {\r\n        throw new Error('ngxInput directive: Can\\'t find parent <mat-form-field> elem');\r\n      }\r\n    }\r\n    parent.classList.add('ngx-msg__mat-form-field');\r\n  }\r\n\r\n  /**\r\n   * Sets current validation params on init or on changes\r\n   */\r\n  private setValidationParams(): void {\r\n\r\n    this.inputParams.validationParams = {};\r\n    this.validatorParams = [];\r\n\r\n    if (this.hasBoolaenParam('required')) {\r\n      const requiredParam: inputMsg.ValidatorParam = {\r\n        name: 'required',\r\n        value: undefined,\r\n        set: true\r\n      };\r\n      this.inputParams.validationParams.required = requiredParam;\r\n      this.validatorParams.push(requiredParam);\r\n    }\r\n\r\n    Object.keys(this.validatorOptions).forEach(name => {\r\n      const param: inputMsg.ValidatorParam = this.validatorOptions[name]();\r\n      if (param.set) {\r\n        this.inputParams.validationParams[name] = param;\r\n        this.validatorParams.push(param);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Stops generating the input status\r\n   */\r\n  private statusOff(): void {\r\n    this.statusSubscriptions.forEach((sub) => {\r\n      sub.unsubscribe();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Starts generating the input status\r\n   */\r\n  private statusOn(): void {\r\n\r\n    // Emits an error status if the input is invalid.\r\n    const emitErrorStatus = (): void => {\r\n      for (const param of this.validatorParams) {\r\n        if (this.model.hasError(param.name)) {\r\n          this.inputParams.valid.next(false);\r\n          this.inputParams.status.next(param.name);\r\n          return;\r\n        }\r\n      }\r\n    };\r\n\r\n    const emitErrorStatusOnTouched = (): void => {\r\n      if (this.model.touched || this.form.submitted) {\r\n        emitErrorStatus();\r\n      }\r\n    };\r\n\r\n    const emitValidAndPristineStatus = (status: string): void => {\r\n      switch (status) {\r\n        case 'INVALID':\r\n          this.prevValid = false;\r\n          break;\r\n        case 'VALID':\r\n          if (!this.prevValid) {\r\n            this.inputParams.valid.next(true);\r\n            this.inputParams.status.next('valid');\r\n          }\r\n          this.prevValid = true;\r\n          break;\r\n        case 'PRISTINE':\r\n          this.inputParams.valid.next(true);\r\n          this.inputParams.status.next('pristine');\r\n          break;\r\n        default:\r\n          return;\r\n      }\r\n    };\r\n\r\n    const blurSub = fromEventMock(this.elem, 'blur', emitErrorStatusOnTouched);\r\n    this.statusSubscriptions.push(blurSub as Subscription);\r\n\r\n    const controlValueSub: Subscription = this.model.valueChanges\r\n      .subscribe(emitErrorStatusOnTouched);\r\n    this.statusSubscriptions.push(controlValueSub);\r\n\r\n    const formSubmitSub: Subscription = this.form.ngSubmit\r\n      .subscribe(emitErrorStatus);\r\n    this.statusSubscriptions.push(formSubmitSub);\r\n\r\n    const controlStatusSub: Subscription = this.model.statusChanges\r\n      .subscribe(emitValidAndPristineStatus);\r\n    this.statusSubscriptions.push(controlStatusSub);\r\n\r\n    // Adds/removes 'ngx-input_invalid' class to the input\r\n    const toggleClassOnValidChange = (valid: boolean): void => {\r\n      if (valid) {\r\n        this.elem.classList.remove('ngx-input_invalid');\r\n      } else {\r\n        this.elem.classList.add('ngx-input_invalid');\r\n      }\r\n    };\r\n    const validSub: Subscription = this.inputParams.valid\r\n      .subscribe(toggleClassOnValidChange);\r\n    this.statusSubscriptions.push(validSub);\r\n\r\n  }\r\n\r\n}\r\n","import { AbstractControl } from '@angular/forms';\r\n\r\nimport { inputMsg } from '../types';\r\n\r\nexport abstract class InputValidator implements inputMsg.InputValidator {\r\n\r\n  /**\r\n   * All available validators for specific input type\r\n   */\r\n  protected abstract availableValidators: { [name: string]: inputMsg.ValidatorFn<any> };\r\n  /**\r\n   * The sequence of validator names to validate an input element with.\r\n   * Validators are applied one by one.\r\n   * @example ['required', 'minlenght', 'maxlength', 'pattern']\r\n   */\r\n  protected abstract validatorSequence: string[];\r\n  /**\r\n   * The current validators applied to the specific input element\r\n   */\r\n  private currentValidators: inputMsg.ValidatorConfig<any>[];\r\n\r\n\r\n  public validate(control: AbstractControl): { [validatorName: string]: any } | null {\r\n\r\n    let result: { [validatorName: string]: any } | null = null;\r\n    for (const validator of this.currentValidators) {\r\n      result = validator.fn(control.value, validator.value);\r\n      // break if the input is invalid\r\n      if (result !== null) {\r\n        break;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n\r\n  protected empty(value: any): boolean {\r\n    return typeof value === 'undefined' || value === '' || value === null;\r\n  }\r\n\r\n  protected setCurrentValidators(validatorsToApply: { [validatorName: string]: inputMsg.ValidatorParam }): void {\r\n\r\n    if (typeof this.availableValidators !== 'object') {\r\n      throw new Error('InputValidator class: this.availableValidators have to be initialized in the derived class');\r\n    }\r\n    if (!Array.isArray(this.validatorSequence)) {\r\n      throw new Error('InputValidator class: this.validatorSequence have to be initialized in the derived class');\r\n    }\r\n\r\n    this.availableValidators.required = this.required.bind(this);\r\n\r\n    this.currentValidators = [];\r\n    const paramSequence = this.getValidatorParamSequence(validatorsToApply);\r\n    paramSequence.forEach(param => {\r\n      const config: inputMsg.ValidatorConfig<any> = {\r\n        name: param.name,\r\n        value: param.value,\r\n        set: param.set,\r\n        fn: this.availableValidators[param.name]\r\n      };\r\n      this.currentValidators.push(config);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns the sequence of configs of validators\r\n   */\r\n  private getValidatorParamSequence<T>(validatorsToApply: { [key: string]: inputMsg.ValidatorParam }): inputMsg.ValidatorParam[] {\r\n\r\n    const config: inputMsg.ValidatorParam[] = [];\r\n    this.validatorSequence.forEach(name => {\r\n      if (validatorsToApply[name]) {\r\n        config.push(validatorsToApply[name]);\r\n      }\r\n    });\r\n    return config;\r\n  }\r\n\r\n  /**\r\n   * Validation function to be used with an any type of an input element\r\n   */\r\n  private required(value: string): { required: true } | null {\r\n    return this.empty(value) ? { required: true } : null;\r\n  }\r\n\r\n}\r\n","import { InputValidator } from '../models/input-validator';\r\n\r\nimport { inputMsg } from '../types';\r\n\r\nexport class EmailValidator extends InputValidator {\r\n\r\n  protected availableValidators = {\r\n    email: this.email\r\n  };\r\n  protected validatorSequence = ['required', 'email'];\r\n\r\n  constructor(\r\n    private validatorsToApply: { [key: string]: inputMsg.ValidatorParam }\r\n  ) {\r\n    super();\r\n    super.setCurrentValidators(validatorsToApply);\r\n  }\r\n\r\n  private email(value: string): { email: string } | null {\r\n\r\n    /**\r\n     * We should skip the validation for empty values.\r\n     * Consider the case when a client sets an optional\r\n     * email input that should be validated\r\n     * only if a user inputs some text.\r\n     */\r\n    if (super.empty(value)) {\r\n      return { email: null };\r\n    }\r\n    // http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\r\n    // tslint:disable-next-line:max-line-length\r\n    const regExp = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    const isValid: boolean = regExp.test(value);\r\n\r\n    return isValid ? null : { email: value };\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { EmailValidator } from './email-validator';\r\n\r\nimport { inputMsg } from '../types';\r\n\r\n@Injectable()\r\nexport class EmailValidatorFactory implements inputMsg.InputValidatorFactory {\r\n\r\n  public create(validatorsToApply: { [key: string]: inputMsg.ValidatorParam }): EmailValidator {\r\n    return new EmailValidator(validatorsToApply);\r\n  }\r\n\r\n}\r\n","import { Directive, ElementRef } from '@angular/core';\r\nimport { NG_VALIDATORS } from '@angular/forms';\r\n\r\nimport { AbstractInput } from '../models/abstract-input';\r\nimport { EmailValidatorFactory } from './email-validator-factory.service';\r\nimport { InputStorageService } from '../input-storage.service';\r\n\r\n@Directive({\r\n  selector: 'input[ngxInputEmail]',\r\n  providers: [\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: InputEmailDirective,\r\n      multi: true\r\n    },\r\n    EmailValidatorFactory\r\n  ]\r\n})\r\nexport class InputEmailDirective extends AbstractInput {\r\n\r\n  protected validatorOptions = {\r\n    email: () => {\r\n      // The email validator is always set by default\r\n      return {\r\n        name: 'email',\r\n        set: true\r\n      };\r\n    }\r\n  };\r\n\r\n  constructor(\r\n    protected elemRef: ElementRef,\r\n    protected inputStorageService: InputStorageService,\r\n    protected validatorFactory: EmailValidatorFactory\r\n  ) {\r\n    super(elemRef, inputStorageService, validatorFactory);\r\n  }\r\n\r\n}\r\n","import { AbstractControl } from '@angular/forms';\r\n\r\nimport { InputValidator } from '../models/input-validator';\r\n\r\nimport { inputMsg } from '../types';\r\n\r\nexport class NumberValidator extends InputValidator {\r\n\r\n  protected availableValidators = {\r\n    integer: this.integer.bind(this),\r\n    max: this.max.bind(this),\r\n    min: this.min.bind(this)\r\n  };\r\n  protected validatorSequence = ['required', 'integer', 'min', 'max'];\r\n\r\n  constructor(\r\n    private validatorsToApply: { [key: string]: inputMsg.ValidatorParam }\r\n  ) {\r\n    super();\r\n    super.setCurrentValidators(validatorsToApply);\r\n  }\r\n\r\n  private integer(value: number): { integer: any } | null {\r\n\r\n    if (!this.number(value)) {\r\n      return { integer: 'Not a number' };\r\n    }\r\n    const integer: boolean = Math.floor(value) === value;\r\n    return integer ? null : { integer: value };\r\n  }\r\n\r\n  private max(value: number, max: number): { max: any } | null {\r\n\r\n    if (!this.number(value)) {\r\n      return { max: 'Not a number' };\r\n    }\r\n    if (value > max) {\r\n      const error = {\r\n        max: value === 0 ? '0' : value\r\n      };\r\n      return error;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private min(value: number, min: number): { min: any } | null {\r\n\r\n    if (!this.number(value)) {\r\n      return { min: 'Not a number' };\r\n    }\r\n    if (value < min) {\r\n      const error = {\r\n        min: value === 0 ? '0' : value\r\n      };\r\n      return error;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private number(arg: any): boolean {\r\n    return !isNaN(parseFloat(arg)) && isFinite(arg);\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { NumberValidator } from './number-validator';\r\n\r\nimport { inputMsg } from '../types';\r\n\r\n@Injectable()\r\nexport class NumberValidatorFactory implements inputMsg.InputValidatorFactory {\r\n\r\n  public create(validatorsToApply: { [key: string]: inputMsg.ValidatorParam }): NumberValidator {\r\n    return new NumberValidator(validatorsToApply);\r\n  }\r\n\r\n}\r\n","import { Directive, ElementRef, Input } from '@angular/core';\r\nimport { NG_VALIDATORS } from '@angular/forms';\r\n\r\nimport { AbstractInput } from '../models/abstract-input';\r\nimport { InputStorageService } from '../input-storage.service';\r\nimport { NumberValidatorFactory } from './number-validator-factory.service';\r\n\r\n@Directive({\r\n  selector: 'input[ngxInputNumber][type=\"number\"]',\r\n  providers: [\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: InputNumberDirective,\r\n      multi: true\r\n    },\r\n    NumberValidatorFactory\r\n  ]\r\n})\r\nexport class InputNumberDirective extends AbstractInput {\r\n\r\n  @Input() public integer: '' | boolean;\r\n  @Input() public max: string | number;\r\n  @Input() public min: string | number;\r\n\r\n  protected validatorOptions = {\r\n    integer: () => {\r\n      return {\r\n        name: 'integer',\r\n        set: super.hasBoolaenParam('integer')\r\n      };\r\n    },\r\n    max: () => {\r\n      return {\r\n        name: 'max',\r\n        set: super.hasNumberParam('max'),\r\n        value: +this.max\r\n      };\r\n    },\r\n    min: () => {\r\n      return {\r\n        name: 'min',\r\n        set: super.hasNumberParam('min'),\r\n        value: +this.min\r\n      };\r\n    }\r\n  };\r\n\r\n  constructor(\r\n    protected elemRef: ElementRef,\r\n    protected inputStorageService: InputStorageService,\r\n    protected validatorFactory: NumberValidatorFactory\r\n  ) {\r\n    super(elemRef, inputStorageService, validatorFactory);\r\n  }\r\n\r\n}\r\n","import { InputValidator } from '../models/input-validator';\r\n\r\nimport { inputMsg } from '../types';\r\n\r\n/**\r\n * Validates 'text' like input element.\r\n */\r\nexport class TextValidator extends InputValidator {\r\n\r\n  /**\r\n   * Note, 'minlength' and 'maxlength' validators\r\n   * are already supported by Angular NgForm, but\r\n   * we should emplement them to stop the validation\r\n   * process when the first validator fails.\r\n   * See: InputValidator.validate() implementation.\r\n   */\r\n  protected availableValidators = {\r\n    maxlength: this.maxlength,\r\n    minlength: this.minlength,\r\n    pattern: this.pattern\r\n  };\r\n  protected validatorSequence = ['required', 'minlength', 'maxlength', 'pattern'];\r\n\r\n  constructor(\r\n    private validatorsToApply: { [key: string]: inputMsg.ValidatorParam }\r\n  ) {\r\n    super();\r\n    super.setCurrentValidators(validatorsToApply);\r\n  }\r\n\r\n  private maxlength(value: string, max: number): { maxlength: string } | null {\r\n    if (super.empty(value)) {\r\n      return null;\r\n    }\r\n    return value.length > max ? { maxlength: value } : null;\r\n  }\r\n\r\n  private minlength(value: string, min: number): { minlength: string } | null {\r\n\r\n    if (value === null || typeof value === 'undefined') {\r\n      return null;\r\n    }\r\n    if (value === '') {\r\n      return { minlength: 'empty' };\r\n    }\r\n    return value.length < min ? { minlength: value } : null;\r\n  }\r\n\r\n  private pattern(value: string, regExp: RegExp): { pattern: string } | null {\r\n    if (super.empty(value)) {\r\n      return { pattern: 'empty' };\r\n    }\r\n    return regExp.test(value) ? null : { pattern: value };\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { TextValidator } from './text-validator';\r\n\r\nimport { inputMsg } from '../types';\r\n\r\n@Injectable()\r\nexport class TextValidatorFactory implements inputMsg.InputValidatorFactory {\r\n\r\n  public create(validatorsToApply: { [key: string]: inputMsg.ValidatorParam }): TextValidator {\r\n    return new TextValidator(validatorsToApply);\r\n  }\r\n\r\n}\r\n","import { Directive, ElementRef, Input, OnInit, OnChanges, OnDestroy, SimpleChange } from '@angular/core';\r\nimport { NG_VALIDATORS } from '@angular/forms';\r\n\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { AbstractInput } from '../models/abstract-input';\r\nimport { InputStorageService } from '../input-storage.service';\r\nimport { TextValidatorFactory } from './text-validator-factory.service';\r\n\r\n@Directive({\r\n  selector: 'input[ngxInputText], textarea[ngxInputText]',\r\n  providers: [\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: InputTextDirective,\r\n      multi: true\r\n    },\r\n    TextValidatorFactory\r\n  ]\r\n})\r\n\r\nexport class InputTextDirective extends AbstractInput implements OnChanges, OnInit, OnDestroy {\r\n\r\n  @Input() public maxlength: string | number;\r\n  @Input() public minlength: string | number;\r\n  @Input() public pattern: RegExp;\r\n\r\n  protected validatorOptions = {\r\n    maxlength: () => {\r\n      return {\r\n        name: 'maxlength',\r\n        set: super.hasNumberParam('maxlength'),\r\n        value: +this.maxlength\r\n      };\r\n    },\r\n    minlength: () => {\r\n      return {\r\n        name: 'minlength',\r\n        set: super.hasNumberParam('minlength'),\r\n        value: +this.minlength\r\n      };\r\n    },\r\n    pattern: () => {\r\n      return {\r\n        name: 'pattern',\r\n        set: this.pattern instanceof RegExp,\r\n        value: this.pattern\r\n      };\r\n    }\r\n  };\r\n\r\n  private maxLengthSub: Subscription;\r\n\r\n  constructor(\r\n    protected elemRef: ElementRef,\r\n    protected inputStorageService: InputStorageService,\r\n    protected validatorFactory: TextValidatorFactory\r\n  ) {\r\n    super(elemRef, inputStorageService, validatorFactory);\r\n  }\r\n\r\n  public ngOnChanges(changes: { [prop: string]: SimpleChange }): void {\r\n    super.ngOnChanges(changes);\r\n    this.maxLengthOn();\r\n  }\r\n\r\n  public ngOnDestroy(): void {\r\n    super.ngOnDestroy();\r\n    this.maxLengthOff();\r\n  }\r\n\r\n  public ngOnInit(): void {\r\n    super.ngOnInit();\r\n    this.maxLengthOn();\r\n  }\r\n\r\n  private emitMaxLengthStatus(): void {\r\n    if (this.model.value.length === +this.maxlength) {\r\n      this.inputParams.status.next('maxlength');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stops generating 'maxlength' status\r\n   */\r\n  private maxLengthOff(): void {\r\n    if (this.maxLengthSub) {\r\n      this.maxLengthSub.unsubscribe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Starts generating 'maxlength' status\r\n   */\r\n  private maxLengthOn(): void {\r\n    if (super.hasNumberParam('maxlength') && !this.maxLengthSub) {\r\n      this.maxLengthSub = this.model.valueChanges\r\n        .subscribe(this.emitMaxLengthStatus.bind(this));\r\n    }\r\n  }\r\n\r\n}\r\n","import { Directive, Input, OnInit, OnDestroy, ElementRef } from '@angular/core';\r\n\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport { InputMsgConfigService } from '../input-msg-config.service';\r\nimport { InputStorageService } from '../input-storage.service';\r\n\r\nimport { inputMsg } from '../types';\r\n\r\n/**\r\n * Adds/removes 'ngx-input_invalid' css class\r\n * when input status changes\r\n */\r\n@Directive({\r\n  selector: '[ngxLabel]'\r\n})\r\nexport class LabelDirective implements OnInit, OnDestroy {\r\n\r\n  /**\r\n   * input element id or name\r\n   */\r\n  @Input() public for: string;\r\n\r\n  private elem: HTMLLabelElement;\r\n  private highlightColor: string;\r\n  private valid: BehaviorSubject<boolean>;\r\n\r\n  constructor(\r\n    private configService: InputMsgConfigService,\r\n    private elemRef: ElementRef,\r\n    private inputStorageService: InputStorageService\r\n  ) { }\r\n\r\n  public ngOnDestroy(): void {\r\n    if (this.valid && this.valid.unsubscribe) {\r\n      this.valid.unsubscribe();\r\n    }\r\n  }\r\n\r\n  public ngOnInit(): void {\r\n\r\n    this.elem = this.elemRef.nativeElement;\r\n    this.highlightColor = this.configService.get().colors.error;\r\n\r\n    if (!this.for) {\r\n      throw new Error('ngxLabel directive: \\'for\\' attribute with input id or name is required.');\r\n    }\r\n\r\n    this.setAnimation();\r\n\r\n    // Wait till the input element will be initialized.\r\n    // We should wait in case the label element was\r\n    // inserted before the input.\r\n    setTimeout(() => {\r\n      const inputParams = this.inputStorageService.get(this.for);\r\n      if (!inputParams) {\r\n        throw new Error(`ngxLabel directive: can\\'t find the input element with id or name: ${this.for}`);\r\n      }\r\n\r\n      this.valid = inputParams.valid;\r\n      this.valid.subscribe((valid: boolean) => {\r\n        this.toggleClassOnValidChange(valid);\r\n        this.highlightOnValidChange(valid);\r\n      });\r\n\r\n    }, 0);\r\n  }\r\n\r\n  private highlightOnValidChange(valid: boolean): void {\r\n    if (valid) {\r\n      this.elem.style.color = '';\r\n    } else {\r\n      this.elem.style.color = this.highlightColor;\r\n    }\r\n  }\r\n\r\n  private setAnimation(): void {\r\n    this.elem.style.transition = 'color 250ms ease-in';\r\n  }\r\n\r\n  private toggleClassOnValidChange(valid: boolean): void {\r\n    if (valid) {\r\n      this.elem.classList.remove('ngx-input_invalid');\r\n    } else {\r\n      this.elem.classList.add('ngx-input_invalid');\r\n    }\r\n  }\r\n\r\n}\r\n","import { Component, Input, OnInit, OnChanges, OnDestroy, SimpleChange, ViewEncapsulation } from '@angular/core';\r\nimport { trigger, state, style, animate, transition } from '@angular/animations';\r\n\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { InputMsgConfigService } from '../input-msg-config.service';\r\nimport { InputStorageService } from '../input-storage.service';\r\n\r\nimport { inputMsg } from '../types';\r\n\r\n\r\n/**\r\n * Displays a message for an input element\r\n * depending on it`s validation status.\r\n */\r\n@Component({\r\n  selector: 'ngx-msg',\r\n  template: `<div class=\"ngx-msg__container\" \r\n  [ngClass]=\"getClasses()\"\r\n  [ngStyle]=\"getStyles()\"\r\n  >\r\n\r\n  <span *ngIf=\"currentMsg\" [@msgAnimation]>\r\n    {{currentMsg}}\r\n  </span>\r\n\r\n</div>\r\n`,\r\n  styles: [`.ngx-msg__mat-form-field{margin-bottom:16px;width:100%}.ngx-msg__container{display:block;font-size:12px;min-height:20px;margin-top:3px}.ngx-msg_material{margin-top:-33px}.ngx-msg_pos_bottom-left{text-align:left}.ngx-msg_pos_bottom-right{text-align:right}`],\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations: [\r\n    trigger('msgAnimation', [\r\n      state('active', style({ opacity: 1 })),\r\n      transition('void => *', [\r\n        style({ opacity: 0 }),\r\n        animate('250ms ease-in', style({ opacity: 1 }))\r\n      ]),\r\n      transition('* => void', [\r\n        style({ opacity: 1 }),\r\n        animate('250ms ease-in', style({ opacity: 0 }))\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class MsgComponent implements OnInit, OnChanges, OnDestroy {\r\n\r\n  /**\r\n   * An input id or name attribute\r\n   */\r\n  @Input() public for: string;\r\n  /**\r\n   * Optional params with custom messages\r\n   * to overwrite the default ones\r\n   */\r\n  @Input() public email: string | inputMsg.MsgFn;\r\n  @Input() public integer: string | inputMsg.MsgFn;\r\n  @Input() public max: string | inputMsg.MsgFn;\r\n  @Input() public maxlength: string | inputMsg.MsgFn;\r\n  @Input() public min: string | inputMsg.MsgFn;\r\n  @Input() public minlength: string | inputMsg.MsgFn;\r\n  @Input() public pattern: string | inputMsg.MsgFn;\r\n  @Input() public position: inputMsg.Position;\r\n  @Input() public required: string | inputMsg.MsgFn;\r\n\r\n  // Currently shown message\r\n  public currentMsg: string;\r\n\r\n  private currentStatus: inputMsg.InputStatus;\r\n  private defaultConfig: inputMsg.Config;\r\n  private inputParams: inputMsg.InputParams;\r\n  /**\r\n   * All available messages corresponded\r\n   * to validation params of the input\r\n   */\r\n  private messages: inputMsg.ResultMsg = {};\r\n  private subscriptions: Subscription[] = [];\r\n\r\n  constructor(\r\n    private configService: InputMsgConfigService,\r\n    private storageService: InputStorageService\r\n  ) { }\r\n\r\n  public getClasses(): { [name: string]: boolean } {\r\n\r\n    const position: 'bottom-left' | 'bottom-right' = this.position || this.configService.get().position;\r\n    return {\r\n      'ngx-msg_pos_bottom-left': position === 'bottom-left',\r\n      'ngx-msg_pos_bottom-right': position === 'bottom-right',\r\n      'ngx-msg_color_tooltip': this.currentStatus === 'maxlength',\r\n      'ngx-msg_material': this.inputParams.material\r\n    };\r\n  }\r\n\r\n  public getStyles(): { [name: string]: string } {\r\n\r\n    let color: string;\r\n    if (this.currentStatus === 'maxlength') {\r\n      color = this.defaultConfig.colors.maxlength;\r\n    } else {\r\n      color = this.defaultConfig.colors.error;\r\n    }\r\n    return { color: color };\r\n  }\r\n\r\n  public ngOnChanges(changes: { [prop: string]: SimpleChange }): void {\r\n\r\n    const changeableProps = {\r\n      email: true,\r\n      integer: true,\r\n      max: true,\r\n      maxlength: true,\r\n      min: true,\r\n      minlength: true,\r\n      position: true,\r\n      required: true\r\n    };\r\n\r\n    Object.keys(changes).forEach(name => {\r\n      if (!changeableProps[name] || changes[name].isFirstChange()) {\r\n        return;\r\n      }\r\n      this.setMessage(name as inputMsg.ValidatorName);\r\n\r\n      // update currentMsg if it has been changed\r\n      // and the input is invalid\r\n      if (this.currentStatus === name && name !== 'maxlength') {\r\n        this.currentMsg = this.messages[name];\r\n      }\r\n    });\r\n  }\r\n\r\n  public ngOnDestroy(): void {\r\n    this.subscriptions.forEach(sub => sub.unsubscribe());\r\n  }\r\n\r\n  public ngOnInit(): void {\r\n\r\n    this.defaultConfig = this.configService.get();\r\n\r\n    if (!this.for) {\r\n      throw new Error('ngxMsg component: \\'for\\' parameter with the input id or name must be provided.');\r\n    }\r\n\r\n    this.inputParams = this.storageService.get(this.for);\r\n    if (!this.inputParams) {\r\n      throw new Error(`ngxMsg component: can\\'t find the input element with id or name: ${this.for}`);\r\n    }\r\n\r\n    // Set default or custom messages for given validation params\r\n    this.setAllMessages();\r\n\r\n    // Listen to the input status\r\n    const statusSub: Subscription = this.inputParams.status\r\n      .subscribe(this.onStatusChange.bind(this));\r\n    this.subscriptions.push(statusSub);\r\n\r\n    // Listen to the input params change\r\n    const inputParamsChangeSub: Subscription = this.inputParams.paramChange\r\n      .subscribe(this.onInputParamsChange.bind(this));\r\n    this.subscriptions.push(inputParamsChangeSub);\r\n  }\r\n\r\n  // Updates messages when input params change\r\n  private onInputParamsChange(changedPropName: 'label' | inputMsg.ValidatorName): void {\r\n\r\n    if (changedPropName === 'label') {\r\n      this.setAllMessages();\r\n    } else {\r\n      this.setMessage(changedPropName as inputMsg.ValidatorName);\r\n    }\r\n\r\n    // update current msg if the input is invalid\r\n    if (this.currentStatus === 'pristine' ||\r\n      this.currentStatus === 'valid' ||\r\n      this.currentStatus === 'maxlength') {\r\n      return;\r\n    }\r\n    this.currentMsg = this.messages[this.currentStatus];\r\n  }\r\n\r\n  // Updates currentStatus and shows/hides currentMsg\r\n  private onStatusChange(status: inputMsg.InputStatus): void {\r\n\r\n    this.currentStatus = status;\r\n    switch (status) {\r\n      case 'pristine':\r\n        this.currentMsg = '';\r\n        break;\r\n      case 'valid':\r\n        this.currentMsg = '';\r\n        break;\r\n      case 'maxlength':\r\n        this.currentMsg = this.messages[status];\r\n        setTimeout(() => { this.currentMsg = ''; }, 2000);\r\n        break;\r\n      default:\r\n        this.currentMsg = this.messages[status];\r\n    }\r\n  }\r\n\r\n  private setAllMessages(): void {\r\n    Object.keys(this.inputParams.validationParams).forEach((name: inputMsg.ValidatorName) => {\r\n      this.setMessage(name);\r\n    });\r\n  }\r\n\r\n  // Sets message text for a given validation parameter.\r\n  // If appropriate message expression is not provided\r\n  // throgh @Input() binding - the default one is used instead.\r\n  private setMessage(name: inputMsg.ValidatorName): void {\r\n\r\n    if (!this.inputParams.validationParams[name]) {\r\n      return;\r\n    }\r\n\r\n    // helper type guard\r\n    const isFn = (arg: string | Function): arg is inputMsg.MsgFn => {\r\n      return typeof arg === 'function';\r\n    };\r\n\r\n    // get specific or default msgExpression\r\n    let msgExpression: inputMsg.MsgFn | string;\r\n    if (typeof this[name] !== 'undefined') {\r\n      msgExpression = this[name] as inputMsg.MsgFn | string;\r\n    } else {\r\n      msgExpression = this.defaultConfig.msg[name] as inputMsg.MsgFn | string;\r\n    }\r\n\r\n    // Set a message generated by MsgFn() or as a simle string\r\n    if (isFn(msgExpression)) {\r\n      this.messages[name] = msgExpression(this.inputParams.label, this.inputParams.validationParams[name].value);\r\n    } else {\r\n      this.messages[name] = msgExpression;\r\n    }\r\n\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { InputMsgConfigService } from './input-msg-config.service';\r\nimport { InputStorageService } from './input-storage.service';\r\n\r\nimport { InputEmailDirective } from './input-email/input-email.directive';\r\nimport { InputNumberDirective } from './input-number/input-number.directive';\r\nimport { InputTextDirective } from './input-text/input-text.directive';\r\nimport { LabelDirective } from './label/label.directive';\r\nimport { MsgComponent } from './msg/msg.component';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    BrowserAnimationsModule,\r\n    CommonModule,\r\n    FormsModule\r\n  ],\r\n  declarations: [\r\n    InputEmailDirective,\r\n    InputNumberDirective,\r\n    InputTextDirective,\r\n    LabelDirective,\r\n    MsgComponent\r\n  ],\r\n  providers: [\r\n    InputMsgConfigService,\r\n    InputStorageService\r\n  ],\r\n  exports: [\r\n    InputEmailDirective,\r\n    InputNumberDirective,\r\n    InputTextDirective,\r\n    LabelDirective,\r\n    MsgComponent\r\n  ]\r\n})\r\n\r\nexport class InputMsgModule { }\r\n"]}