{"version":3,"file":"ngx-input-msg.umd.js.map","sources":["ng://ngx-input-msg/lib/input-msg-config.service.ts","ng://ngx-input-msg/lib/input-storage.service.ts",null,"ng://ngx-input-msg/lib/models/from-event-mock.ts","ng://ngx-input-msg/lib/models/abstract-input.ts","ng://ngx-input-msg/lib/models/input-validator.ts","ng://ngx-input-msg/lib/input-email/email-validator.ts","ng://ngx-input-msg/lib/input-email/email-validator-factory.service.ts","ng://ngx-input-msg/lib/input-email/input-email.directive.ts","ng://ngx-input-msg/lib/input-number/number-validator.ts","ng://ngx-input-msg/lib/input-number/number-validator-factory.service.ts","ng://ngx-input-msg/lib/input-number/input-number.directive.ts","ng://ngx-input-msg/lib/input-text/text-validator.ts","ng://ngx-input-msg/lib/input-text/text-validator-factory.service.ts","ng://ngx-input-msg/lib/input-text/input-text.directive.ts","ng://ngx-input-msg/lib/label/label.directive.ts","ng://ngx-input-msg/lib/msg/msg.component.ts","ng://ngx-input-msg/lib/input-msg.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\nimport { inputMsg } from './types';\r\n\r\n/**\r\n * Provides configuration for displaying messages.\r\n */\r\n@Injectable()\r\nexport class InputMsgConfigService {\r\n\r\n  private defaultConfig: inputMsg.Config = {\r\n    colors: {\r\n      error: '#f44336',\r\n      maxlength: 'grey'\r\n    },\r\n    position: 'bottom-left',\r\n    msg: {\r\n      email: (label: string) => `Wrong ${label}`,\r\n      integer: 'Fractional digits are forbidden',\r\n      max: (label: string, allowed: number) => `Maximum allowed ${label} is ${allowed}`,\r\n      min: (label: string, allowed: number) => `Minimum allowed ${label} is ${allowed}`,\r\n      maxlength: (label: string, allowed: number) => `Maximum ${allowed} chars limit was reached`,\r\n      minlength: (label: string, allowed: number) => `At least ${allowed} chars length are required`,\r\n      pattern: (label: string) => `Invalid ${label}`,\r\n      required: (label: string) => `${label} is required`\r\n    }\r\n  };\r\n\r\n  public get(): inputMsg.Config {\r\n    return this.defaultConfig;\r\n  }\r\n\r\n  public set(config: inputMsg.Config) {\r\n\r\n    if (config.position) {\r\n      this.defaultConfig.position = config.position;\r\n    }\r\n\r\n    // set colors\r\n    if (config.colors) {\r\n      Object.keys(config.colors).forEach((key: string) => {\r\n        this.defaultConfig.colors[key] = config.colors[key];\r\n      });\r\n    }\r\n\r\n    // set msg\r\n    if (!config.msg) {\r\n      return;\r\n    }\r\n    Object.keys(config.msg).forEach((key: string) => {\r\n      this.defaultConfig.msg[key] = config.msg[key];\r\n    });\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { inputMsg } from './types';\r\n\r\n/**\r\n * This utility service stores input element params\r\n * for communication between ngxInput directive,\r\n * ngx-msg component and ngxLabel directive.\r\n */\r\n@Injectable()\r\nexport class InputStorageService {\r\n\r\n  private storageById: {\r\n    [id: string]: inputMsg.InputParams\r\n  } = {};\r\n\r\n  /**\r\n   * Note, this storage is provided, because\r\n   * user might set id or name attribute to\r\n   * the input element or even both of them.\r\n   */\r\n  private storageByName: {\r\n    [id: string]: inputMsg.InputParams\r\n  } = {};\r\n\r\n  public get(key: string): inputMsg.InputParams {\r\n    return this.storageById[key] || this.storageByName[key];\r\n  }\r\n\r\n  public remove(key: string): void {\r\n    this.removeFromSpecificStorage('storageById', key);\r\n    this.removeFromSpecificStorage('storageByName', key);\r\n  }\r\n\r\n  public set(input: inputMsg.InputParams, id?: string, name?: string): void {\r\n    if (id) {\r\n      this.storageById[id] = input;\r\n    }\r\n    if (name) {\r\n      this.storageByName[name] = input;\r\n    }\r\n  }\r\n\r\n\r\n  private removeFromSpecificStorage(storage: 'storageById' | 'storageByName', key: string): void {\r\n    if (!this[storage][key]) {\r\n      return;\r\n    }\r\n    delete this[storage][key];\r\n  }\r\n\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\r\n * This temporary surrogate replaces\r\n * original rxjs fromEvent function\r\n * to handle rxjs v5 to v6 migration problem.\r\n */\r\nexport const fromEventMock = (eventTarget: HTMLElement, eventName: string, handler: () => void): { unsubscribe: () => void; } => {\r\n\r\n  eventTarget.addEventListener(eventName, handler);\r\n  return {\r\n    unsubscribe: () => {\r\n      eventTarget.removeEventListener(eventName, handler);\r\n    }\r\n  };\r\n\r\n};\r\n","import { ElementRef, Input, OnInit, OnChanges, OnDestroy, SimpleChange } from '@angular/core';\r\nimport { AbstractControl, NgModel, NgForm } from '@angular/forms';\r\n\r\nimport { BehaviorSubject, Subject, Subscription } from 'rxjs';\r\n// rxjs v5/v6 compatible\r\nimport { fromEventMock } from './from-event-mock';\r\n\r\nimport { InputStorageService } from '../input-storage.service';\r\n\r\n// types\r\nimport { inputMsg } from '../types';\r\n\r\n/**\r\n * An abstract class to be derived by\r\n * a concrete input directive class.\r\n * Validates an input element and emits\r\n * the validation status to the listeners\r\n * (MsgComponent, LabelDirective)\r\n * through InputStorageService.\r\n */\r\nexport abstract class AbstractInput implements OnInit, OnChanges, OnDestroy {\r\n\r\n  @Input() public id: string;\r\n  @Input() public label: string;\r\n  @Input() public matInput: '';\r\n  @Input() public model: NgModel;\r\n  @Input() public name: string;\r\n  @Input() public placeholder: string;\r\n  @Input() public required: '' | boolean;\r\n\r\n  protected inputParams: inputMsg.InputParams;\r\n  /**\r\n   * A dictionary with callbacks to get current validation params.\r\n   */\r\n  protected abstract validatorOptions: { [name: string]: inputMsg.ValidatorParamFn };\r\n\r\n  private elem: HTMLInputElement;\r\n  private form: NgForm;\r\n  private inputKey: string;\r\n  private isMaterial: boolean;\r\n  /**\r\n   * Contains true if the prevoius input state was valid.\r\n   */\r\n  private prevValid: boolean;\r\n  private statusSubscriptions: Subscription[] = [];\r\n  /**\r\n   * The current validation params of the input\r\n   */\r\n  private validatorParams: inputMsg.ValidatorParam[];\r\n  private validator: inputMsg.InputValidator;\r\n\r\n  constructor(\r\n    protected elemRef: ElementRef,\r\n    protected inputStorageService: InputStorageService,\r\n    protected inputValidatorFactory: inputMsg.InputValidatorFactory\r\n  ) { }\r\n\r\n  public ngOnChanges(changes: { [prop: string]: SimpleChange }): void {\r\n\r\n    const changeableProps = {\r\n      placeholder: true,\r\n      label: true,\r\n      required: true\r\n    };\r\n\r\n    Object.keys(changes).forEach((name) => {\r\n      if (!changeableProps[name] ||\r\n        !this.validatorOptions[name] ||\r\n        changes[name].isFirstChange()\r\n      ) {\r\n        return;\r\n      }\r\n\r\n      if (name === 'placeholder' || name === 'label') {\r\n        this.inputParams.label = changes[name].currentValue;\r\n        this.inputParams.paramChange.next('label');\r\n        return;\r\n      }\r\n\r\n      this.setValidationParams();\r\n      this.inputParams.paramChange.next(name as inputMsg.ValidatorName);\r\n      this.createValidator();\r\n      this.model.control.updateValueAndValidity();\r\n    });\r\n  }\r\n\r\n  public ngOnDestroy(): void {\r\n    this.statusOff();\r\n    this.inputStorageService.remove(this.inputKey);\r\n  }\r\n\r\n  public ngOnInit(): void {\r\n\r\n    this.elem = this.elemRef.nativeElement;\r\n    this.isMaterial = this.matInput === '';\r\n    this.inputKey = this.id || this.name;\r\n\r\n    this.checkRequiredParams();\r\n\r\n    this.setMatFormFieldClass();\r\n\r\n    this.initInputParams();\r\n    this.setValidationParams();\r\n    this.createValidator();\r\n    this.inputStorageService.set(this.inputParams, this.id, this.name);\r\n\r\n    // Wait till NgForm will be initialized\r\n    setTimeout(() => {\r\n      this.form = this.model.formDirective as NgForm;\r\n      if (!this.form) {\r\n        throw new Error(`ngxInput directive: the element with name=\"${this.name}\" have to be inside a <form> element`);\r\n      }\r\n      this.statusOn();\r\n    }, 0);\r\n  }\r\n\r\n  public validate(control: AbstractControl): { [validatorName: string]: any } | null {\r\n    return this.validator.validate(control);\r\n  }\r\n\r\n  protected hasBoolaenParam(name: string): boolean {\r\n    return this[name] === '' || this[name] === true;\r\n  }\r\n\r\n  protected hasNumberParam(name: string): boolean {\r\n    return !isNaN(this[name]) && isFinite(this[name]);\r\n  }\r\n\r\n  private checkRequiredParams(): void {\r\n    if (!this.name) {\r\n      throw new Error(`ngxInput directive: can\\'t find name attribute on the element`);\r\n    }\r\n    if (!(this.model instanceof NgModel)) {\r\n      throw new Error(`ngxInput directive: NgModel instance have to be provided to [model] param of the element`);\r\n    }\r\n  }\r\n\r\n  private createValidator(): void {\r\n\r\n    const validators: { [validatorName: string]: inputMsg.ValidatorParam } = {};\r\n    this.validatorParams.forEach(param => {\r\n      validators[param.name] = param;\r\n    });\r\n\r\n    this.validator = this.inputValidatorFactory.create(validators);\r\n  }\r\n\r\n  private initInputParams(): void {\r\n\r\n    this.inputParams = {\r\n      label: this.placeholder || this.label,\r\n      material: this.isMaterial,\r\n      paramChange: new Subject(),\r\n      status: new BehaviorSubject('pristine' as inputMsg.InputStatus),\r\n      valid: new BehaviorSubject(true),\r\n      validationParams: undefined\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Sets 'ngx-msg__mat-form-field'\r\n   * if matInput directive was set\r\n   */\r\n  private setMatFormFieldClass(): void {\r\n\r\n    if (!this.isMaterial) {\r\n      return;\r\n    }\r\n    const input = this.elemRef.nativeElement as HTMLInputElement;\r\n    let parent: HTMLElement = input.parentElement;\r\n\r\n    for (let i = 0; i < 10; i++) {\r\n      if (parent.tagName === 'MAT-FORM-FIELD') {\r\n        break;\r\n      }\r\n      parent = parent.parentElement;\r\n      if (i === 9) {\r\n        throw new Error('ngxInput directive: Can\\'t find parent <mat-form-field> elem');\r\n      }\r\n    }\r\n    parent.classList.add('ngx-msg__mat-form-field');\r\n  }\r\n\r\n  /**\r\n   * Sets current validation params on init or on changes\r\n   */\r\n  private setValidationParams(): void {\r\n\r\n    this.inputParams.validationParams = {};\r\n    this.validatorParams = [];\r\n\r\n    if (this.hasBoolaenParam('required')) {\r\n      const requiredParam: inputMsg.ValidatorParam = {\r\n        name: 'required',\r\n        value: undefined,\r\n        set: true\r\n      };\r\n      this.inputParams.validationParams.required = requiredParam;\r\n      this.validatorParams.push(requiredParam);\r\n    }\r\n\r\n    Object.keys(this.validatorOptions).forEach(name => {\r\n      const param: inputMsg.ValidatorParam = this.validatorOptions[name]();\r\n      if (param.set) {\r\n        this.inputParams.validationParams[name] = param;\r\n        this.validatorParams.push(param);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Stops generating the input status\r\n   */\r\n  private statusOff(): void {\r\n    this.statusSubscriptions.forEach((sub) => {\r\n      sub.unsubscribe();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Starts generating the input status\r\n   */\r\n  private statusOn(): void {\r\n\r\n    // Emits an error status if the input is invalid.\r\n    const emitErrorStatus = (): void => {\r\n      for (const param of this.validatorParams) {\r\n        if (this.model.hasError(param.name)) {\r\n          this.inputParams.valid.next(false);\r\n          this.inputParams.status.next(param.name);\r\n          return;\r\n        }\r\n      }\r\n    };\r\n\r\n    const emitErrorStatusOnTouched = (): void => {\r\n      if (this.model.touched || this.form.submitted) {\r\n        emitErrorStatus();\r\n      }\r\n    };\r\n\r\n    const emitValidAndPristineStatus = (status: string): void => {\r\n      switch (status) {\r\n        case 'INVALID':\r\n          this.prevValid = false;\r\n          break;\r\n        case 'VALID':\r\n          if (!this.prevValid) {\r\n            this.inputParams.valid.next(true);\r\n            this.inputParams.status.next('valid');\r\n          }\r\n          this.prevValid = true;\r\n          break;\r\n        case 'PRISTINE':\r\n          this.inputParams.valid.next(true);\r\n          this.inputParams.status.next('pristine');\r\n          break;\r\n        default:\r\n          return;\r\n      }\r\n    };\r\n\r\n    const blurSub = fromEventMock(this.elem, 'blur', emitErrorStatusOnTouched);\r\n    this.statusSubscriptions.push(blurSub as Subscription);\r\n\r\n    const controlValueSub: Subscription = this.model.valueChanges\r\n      .subscribe(emitErrorStatusOnTouched);\r\n    this.statusSubscriptions.push(controlValueSub);\r\n\r\n    const formSubmitSub: Subscription = this.form.ngSubmit\r\n      .subscribe(emitErrorStatus);\r\n    this.statusSubscriptions.push(formSubmitSub);\r\n\r\n    const controlStatusSub: Subscription = this.model.statusChanges\r\n      .subscribe(emitValidAndPristineStatus);\r\n    this.statusSubscriptions.push(controlStatusSub);\r\n\r\n    // Adds/removes 'ngx-input_invalid' class to the input\r\n    const toggleClassOnValidChange = (valid: boolean): void => {\r\n      if (valid) {\r\n        this.elem.classList.remove('ngx-input_invalid');\r\n      } else {\r\n        this.elem.classList.add('ngx-input_invalid');\r\n      }\r\n    };\r\n    const validSub: Subscription = this.inputParams.valid\r\n      .subscribe(toggleClassOnValidChange);\r\n    this.statusSubscriptions.push(validSub);\r\n\r\n  }\r\n\r\n}\r\n","import { AbstractControl } from '@angular/forms';\r\n\r\nimport { inputMsg } from '../types';\r\n\r\nexport abstract class InputValidator implements inputMsg.InputValidator {\r\n\r\n  /**\r\n   * All available validators for specific input type\r\n   */\r\n  protected abstract availableValidators: { [name: string]: inputMsg.ValidatorFn<any> };\r\n  /**\r\n   * The sequence of validator names to validate an input element with.\r\n   * Validators are applied one by one.\r\n   * @example ['required', 'minlenght', 'maxlength', 'pattern']\r\n   */\r\n  protected abstract validatorSequence: string[];\r\n  /**\r\n   * The current validators applied to the specific input element\r\n   */\r\n  private currentValidators: inputMsg.ValidatorConfig<any>[];\r\n\r\n\r\n  public validate(control: AbstractControl): { [validatorName: string]: any } | null {\r\n\r\n    let result: { [validatorName: string]: any } | null = null;\r\n    for (const validator of this.currentValidators) {\r\n      result = validator.fn(control.value, validator.value);\r\n      // break if the input is invalid\r\n      if (result !== null) {\r\n        break;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n\r\n  protected empty(value: any): boolean {\r\n    return typeof value === 'undefined' || value === '' || value === null;\r\n  }\r\n\r\n  protected setCurrentValidators(validatorsToApply: { [validatorName: string]: inputMsg.ValidatorParam }): void {\r\n\r\n    if (typeof this.availableValidators !== 'object') {\r\n      throw new Error('InputValidator class: this.availableValidators have to be initialized in the derived class');\r\n    }\r\n    if (!Array.isArray(this.validatorSequence)) {\r\n      throw new Error('InputValidator class: this.validatorSequence have to be initialized in the derived class');\r\n    }\r\n\r\n    this.availableValidators.required = this.required.bind(this);\r\n\r\n    this.currentValidators = [];\r\n    const paramSequence = this.getValidatorParamSequence(validatorsToApply);\r\n    paramSequence.forEach(param => {\r\n      const config: inputMsg.ValidatorConfig<any> = {\r\n        name: param.name,\r\n        value: param.value,\r\n        set: param.set,\r\n        fn: this.availableValidators[param.name]\r\n      };\r\n      this.currentValidators.push(config);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns the sequence of configs of validators\r\n   */\r\n  private getValidatorParamSequence<T>(validatorsToApply: { [key: string]: inputMsg.ValidatorParam }): inputMsg.ValidatorParam[] {\r\n\r\n    const config: inputMsg.ValidatorParam[] = [];\r\n    this.validatorSequence.forEach(name => {\r\n      if (validatorsToApply[name]) {\r\n        config.push(validatorsToApply[name]);\r\n      }\r\n    });\r\n    return config;\r\n  }\r\n\r\n  /**\r\n   * Validation function to be used with an any type of an input element\r\n   */\r\n  private required(value: string): { required: true } | null {\r\n    return this.empty(value) ? { required: true } : null;\r\n  }\r\n\r\n}\r\n","import { InputValidator } from '../models/input-validator';\r\n\r\nimport { inputMsg } from '../types';\r\n\r\nexport class EmailValidator extends InputValidator {\r\n\r\n  protected availableValidators = {\r\n    email: this.email\r\n  };\r\n  protected validatorSequence = ['required', 'email'];\r\n\r\n  constructor(\r\n    private validatorsToApply: { [key: string]: inputMsg.ValidatorParam }\r\n  ) {\r\n    super();\r\n    super.setCurrentValidators(validatorsToApply);\r\n  }\r\n\r\n  private email(value: string): { email: string } | null {\r\n\r\n    /**\r\n     * We should skip the validation for empty values.\r\n     * Consider the case when a client sets an optional\r\n     * email input that should be validated\r\n     * only if a user inputs some text.\r\n     */\r\n    if (super.empty(value)) {\r\n      return { email: null };\r\n    }\r\n    // http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\r\n    // tslint:disable-next-line:max-line-length\r\n    const regExp = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    const isValid: boolean = regExp.test(value);\r\n\r\n    return isValid ? null : { email: value };\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { EmailValidator } from './email-validator';\r\n\r\nimport { inputMsg } from '../types';\r\n\r\n@Injectable()\r\nexport class EmailValidatorFactory implements inputMsg.InputValidatorFactory {\r\n\r\n  public create(validatorsToApply: { [key: string]: inputMsg.ValidatorParam }): EmailValidator {\r\n    return new EmailValidator(validatorsToApply);\r\n  }\r\n\r\n}\r\n","import { Directive, ElementRef } from '@angular/core';\r\nimport { NG_VALIDATORS } from '@angular/forms';\r\n\r\nimport { AbstractInput } from '../models/abstract-input';\r\nimport { EmailValidatorFactory } from './email-validator-factory.service';\r\nimport { InputStorageService } from '../input-storage.service';\r\n\r\n@Directive({\r\n  selector: 'input[ngxInputEmail]',\r\n  providers: [\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: InputEmailDirective,\r\n      multi: true\r\n    },\r\n    EmailValidatorFactory\r\n  ]\r\n})\r\nexport class InputEmailDirective extends AbstractInput {\r\n\r\n  protected validatorOptions = {\r\n    email: () => {\r\n      // The email validator is always set by default\r\n      return {\r\n        name: 'email',\r\n        set: true\r\n      };\r\n    }\r\n  };\r\n\r\n  constructor(\r\n    protected elemRef: ElementRef,\r\n    protected inputStorageService: InputStorageService,\r\n    protected validatorFactory: EmailValidatorFactory\r\n  ) {\r\n    super(elemRef, inputStorageService, validatorFactory);\r\n  }\r\n\r\n}\r\n","import { AbstractControl } from '@angular/forms';\r\n\r\nimport { InputValidator } from '../models/input-validator';\r\n\r\nimport { inputMsg } from '../types';\r\n\r\nexport class NumberValidator extends InputValidator {\r\n\r\n  protected availableValidators = {\r\n    integer: this.integer.bind(this),\r\n    max: this.max.bind(this),\r\n    min: this.min.bind(this)\r\n  };\r\n  protected validatorSequence = ['required', 'integer', 'min', 'max'];\r\n\r\n  constructor(\r\n    private validatorsToApply: { [key: string]: inputMsg.ValidatorParam }\r\n  ) {\r\n    super();\r\n    super.setCurrentValidators(validatorsToApply);\r\n  }\r\n\r\n  private integer(value: number): { integer: any } | null {\r\n\r\n    if (!this.number(value)) {\r\n      return { integer: 'Not a number' };\r\n    }\r\n    const integer: boolean = Math.floor(value) === value;\r\n    return integer ? null : { integer: value };\r\n  }\r\n\r\n  private max(value: number, max: number): { max: any } | null {\r\n\r\n    if (!this.number(value)) {\r\n      return { max: 'Not a number' };\r\n    }\r\n    if (value > max) {\r\n      const error = {\r\n        max: value === 0 ? '0' : value\r\n      };\r\n      return error;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private min(value: number, min: number): { min: any } | null {\r\n\r\n    if (!this.number(value)) {\r\n      return { min: 'Not a number' };\r\n    }\r\n    if (value < min) {\r\n      const error = {\r\n        min: value === 0 ? '0' : value\r\n      };\r\n      return error;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private number(arg: any): boolean {\r\n    return !isNaN(parseFloat(arg)) && isFinite(arg);\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { NumberValidator } from './number-validator';\r\n\r\nimport { inputMsg } from '../types';\r\n\r\n@Injectable()\r\nexport class NumberValidatorFactory implements inputMsg.InputValidatorFactory {\r\n\r\n  public create(validatorsToApply: { [key: string]: inputMsg.ValidatorParam }): NumberValidator {\r\n    return new NumberValidator(validatorsToApply);\r\n  }\r\n\r\n}\r\n","import { Directive, ElementRef, Input } from '@angular/core';\r\nimport { NG_VALIDATORS } from '@angular/forms';\r\n\r\nimport { AbstractInput } from '../models/abstract-input';\r\nimport { InputStorageService } from '../input-storage.service';\r\nimport { NumberValidatorFactory } from './number-validator-factory.service';\r\n\r\n@Directive({\r\n  selector: 'input[ngxInputNumber][type=\"number\"]',\r\n  providers: [\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: InputNumberDirective,\r\n      multi: true\r\n    },\r\n    NumberValidatorFactory\r\n  ]\r\n})\r\nexport class InputNumberDirective extends AbstractInput {\r\n\r\n  @Input() public integer: '' | boolean;\r\n  @Input() public max: string | number;\r\n  @Input() public min: string | number;\r\n\r\n  protected validatorOptions = {\r\n    integer: () => {\r\n      return {\r\n        name: 'integer',\r\n        set: super.hasBoolaenParam('integer')\r\n      };\r\n    },\r\n    max: () => {\r\n      return {\r\n        name: 'max',\r\n        set: super.hasNumberParam('max'),\r\n        value: +this.max\r\n      };\r\n    },\r\n    min: () => {\r\n      return {\r\n        name: 'min',\r\n        set: super.hasNumberParam('min'),\r\n        value: +this.min\r\n      };\r\n    }\r\n  };\r\n\r\n  constructor(\r\n    protected elemRef: ElementRef,\r\n    protected inputStorageService: InputStorageService,\r\n    protected validatorFactory: NumberValidatorFactory\r\n  ) {\r\n    super(elemRef, inputStorageService, validatorFactory);\r\n  }\r\n\r\n}\r\n","import { InputValidator } from '../models/input-validator';\r\n\r\nimport { inputMsg } from '../types';\r\n\r\n/**\r\n * Validates 'text' like input element.\r\n */\r\nexport class TextValidator extends InputValidator {\r\n\r\n  /**\r\n   * Note, 'minlength' and 'maxlength' validators\r\n   * are already supported by Angular NgForm, but\r\n   * we should emplement them to stop the validation\r\n   * process when the first validator fails.\r\n   * See: InputValidator.validate() implementation.\r\n   */\r\n  protected availableValidators = {\r\n    maxlength: this.maxlength,\r\n    minlength: this.minlength,\r\n    pattern: this.pattern\r\n  };\r\n  protected validatorSequence = ['required', 'minlength', 'maxlength', 'pattern'];\r\n\r\n  constructor(\r\n    private validatorsToApply: { [key: string]: inputMsg.ValidatorParam }\r\n  ) {\r\n    super();\r\n    super.setCurrentValidators(validatorsToApply);\r\n  }\r\n\r\n  private maxlength(value: string, max: number): { maxlength: string } | null {\r\n    if (super.empty(value)) {\r\n      return null;\r\n    }\r\n    return value.length > max ? { maxlength: value } : null;\r\n  }\r\n\r\n  private minlength(value: string, min: number): { minlength: string } | null {\r\n\r\n    if (value === null || typeof value === 'undefined') {\r\n      return null;\r\n    }\r\n    if (value === '') {\r\n      return { minlength: 'empty' };\r\n    }\r\n    return value.length < min ? { minlength: value } : null;\r\n  }\r\n\r\n  private pattern(value: string, regExp: RegExp): { pattern: string } | null {\r\n    if (super.empty(value)) {\r\n      return { pattern: 'empty' };\r\n    }\r\n    return regExp.test(value) ? null : { pattern: value };\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { TextValidator } from './text-validator';\r\n\r\nimport { inputMsg } from '../types';\r\n\r\n@Injectable()\r\nexport class TextValidatorFactory implements inputMsg.InputValidatorFactory {\r\n\r\n  public create(validatorsToApply: { [key: string]: inputMsg.ValidatorParam }): TextValidator {\r\n    return new TextValidator(validatorsToApply);\r\n  }\r\n\r\n}\r\n","import { Directive, ElementRef, Input, OnInit, OnChanges, OnDestroy, SimpleChange } from '@angular/core';\r\nimport { NG_VALIDATORS } from '@angular/forms';\r\n\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { AbstractInput } from '../models/abstract-input';\r\nimport { InputStorageService } from '../input-storage.service';\r\nimport { TextValidatorFactory } from './text-validator-factory.service';\r\n\r\n@Directive({\r\n  selector: 'input[ngxInputText], textarea[ngxInputText]',\r\n  providers: [\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: InputTextDirective,\r\n      multi: true\r\n    },\r\n    TextValidatorFactory\r\n  ]\r\n})\r\n\r\nexport class InputTextDirective extends AbstractInput implements OnChanges, OnInit, OnDestroy {\r\n\r\n  @Input() public maxlength: string | number;\r\n  @Input() public minlength: string | number;\r\n  @Input() public pattern: RegExp;\r\n\r\n  protected validatorOptions = {\r\n    maxlength: () => {\r\n      return {\r\n        name: 'maxlength',\r\n        set: super.hasNumberParam('maxlength'),\r\n        value: +this.maxlength\r\n      };\r\n    },\r\n    minlength: () => {\r\n      return {\r\n        name: 'minlength',\r\n        set: super.hasNumberParam('minlength'),\r\n        value: +this.minlength\r\n      };\r\n    },\r\n    pattern: () => {\r\n      return {\r\n        name: 'pattern',\r\n        set: this.pattern instanceof RegExp,\r\n        value: this.pattern\r\n      };\r\n    }\r\n  };\r\n\r\n  private maxLengthSub: Subscription;\r\n\r\n  constructor(\r\n    protected elemRef: ElementRef,\r\n    protected inputStorageService: InputStorageService,\r\n    protected validatorFactory: TextValidatorFactory\r\n  ) {\r\n    super(elemRef, inputStorageService, validatorFactory);\r\n  }\r\n\r\n  public ngOnChanges(changes: { [prop: string]: SimpleChange }): void {\r\n    super.ngOnChanges(changes);\r\n    this.maxLengthOn();\r\n  }\r\n\r\n  public ngOnDestroy(): void {\r\n    super.ngOnDestroy();\r\n    this.maxLengthOff();\r\n  }\r\n\r\n  public ngOnInit(): void {\r\n    super.ngOnInit();\r\n    this.maxLengthOn();\r\n  }\r\n\r\n  private emitMaxLengthStatus(): void {\r\n    if (this.model.value.length === +this.maxlength) {\r\n      this.inputParams.status.next('maxlength');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stops generating 'maxlength' status\r\n   */\r\n  private maxLengthOff(): void {\r\n    if (this.maxLengthSub) {\r\n      this.maxLengthSub.unsubscribe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Starts generating 'maxlength' status\r\n   */\r\n  private maxLengthOn(): void {\r\n    if (super.hasNumberParam('maxlength') && !this.maxLengthSub) {\r\n      this.maxLengthSub = this.model.valueChanges\r\n        .subscribe(this.emitMaxLengthStatus.bind(this));\r\n    }\r\n  }\r\n\r\n}\r\n","import { Directive, Input, OnInit, OnDestroy, ElementRef } from '@angular/core';\r\n\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport { InputMsgConfigService } from '../input-msg-config.service';\r\nimport { InputStorageService } from '../input-storage.service';\r\n\r\nimport { inputMsg } from '../types';\r\n\r\n/**\r\n * Adds/removes 'ngx-input_invalid' css class\r\n * when input status changes\r\n */\r\n@Directive({\r\n  selector: '[ngxLabel]'\r\n})\r\nexport class LabelDirective implements OnInit, OnDestroy {\r\n\r\n  /**\r\n   * input element id or name\r\n   */\r\n  @Input() public for: string;\r\n\r\n  private elem: HTMLLabelElement;\r\n  private highlightColor: string;\r\n  private valid: BehaviorSubject<boolean>;\r\n\r\n  constructor(\r\n    private configService: InputMsgConfigService,\r\n    private elemRef: ElementRef,\r\n    private inputStorageService: InputStorageService\r\n  ) { }\r\n\r\n  public ngOnDestroy(): void {\r\n    if (this.valid && this.valid.unsubscribe) {\r\n      this.valid.unsubscribe();\r\n    }\r\n  }\r\n\r\n  public ngOnInit(): void {\r\n\r\n    this.elem = this.elemRef.nativeElement;\r\n    this.highlightColor = this.configService.get().colors.error;\r\n\r\n    if (!this.for) {\r\n      throw new Error('ngxLabel directive: \\'for\\' attribute with input id or name is required.');\r\n    }\r\n\r\n    this.setAnimation();\r\n\r\n    // Wait till the input element will be initialized.\r\n    // We should wait in case the label element was\r\n    // inserted before the input.\r\n    setTimeout(() => {\r\n      const inputParams = this.inputStorageService.get(this.for);\r\n      if (!inputParams) {\r\n        throw new Error(`ngxLabel directive: can\\'t find the input element with id or name: ${this.for}`);\r\n      }\r\n\r\n      this.valid = inputParams.valid;\r\n      this.valid.subscribe((valid: boolean) => {\r\n        this.toggleClassOnValidChange(valid);\r\n        this.highlightOnValidChange(valid);\r\n      });\r\n\r\n    }, 0);\r\n  }\r\n\r\n  private highlightOnValidChange(valid: boolean): void {\r\n    if (valid) {\r\n      this.elem.style.color = '';\r\n    } else {\r\n      this.elem.style.color = this.highlightColor;\r\n    }\r\n  }\r\n\r\n  private setAnimation(): void {\r\n    this.elem.style.transition = 'color 250ms ease-in';\r\n  }\r\n\r\n  private toggleClassOnValidChange(valid: boolean): void {\r\n    if (valid) {\r\n      this.elem.classList.remove('ngx-input_invalid');\r\n    } else {\r\n      this.elem.classList.add('ngx-input_invalid');\r\n    }\r\n  }\r\n\r\n}\r\n","import { Component, Input, OnInit, OnChanges, OnDestroy, SimpleChange, ViewEncapsulation } from '@angular/core';\r\nimport { trigger, state, style, animate, transition } from '@angular/animations';\r\n\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { InputMsgConfigService } from '../input-msg-config.service';\r\nimport { InputStorageService } from '../input-storage.service';\r\n\r\nimport { inputMsg } from '../types';\r\n\r\n\r\n/**\r\n * Displays a message for an input element\r\n * depending on it`s validation status.\r\n */\r\n@Component({\r\n  selector: 'ngx-msg',\r\n  template: `<div class=\"ngx-msg__container\" \r\n  [ngClass]=\"getClasses()\"\r\n  [ngStyle]=\"getStyles()\"\r\n  >\r\n\r\n  <span *ngIf=\"currentMsg\" [@msgAnimation]>\r\n    {{currentMsg}}\r\n  </span>\r\n\r\n</div>\r\n`,\r\n  styles: [`.ngx-msg__mat-form-field{margin-bottom:16px;width:100%}.ngx-msg__container{display:block;font-size:12px;min-height:20px;margin-top:3px}.ngx-msg_material{margin-top:-33px}.ngx-msg_pos_bottom-left{text-align:left}.ngx-msg_pos_bottom-right{text-align:right}`],\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations: [\r\n    trigger('msgAnimation', [\r\n      state('active', style({ opacity: 1 })),\r\n      transition('void => *', [\r\n        style({ opacity: 0 }),\r\n        animate('250ms ease-in', style({ opacity: 1 }))\r\n      ]),\r\n      transition('* => void', [\r\n        style({ opacity: 1 }),\r\n        animate('250ms ease-in', style({ opacity: 0 }))\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class MsgComponent implements OnInit, OnChanges, OnDestroy {\r\n\r\n  /**\r\n   * An input id or name attribute\r\n   */\r\n  @Input() public for: string;\r\n  /**\r\n   * Optional params with custom messages\r\n   * to overwrite the default ones\r\n   */\r\n  @Input() public email: string | inputMsg.MsgFn;\r\n  @Input() public integer: string | inputMsg.MsgFn;\r\n  @Input() public max: string | inputMsg.MsgFn;\r\n  @Input() public maxlength: string | inputMsg.MsgFn;\r\n  @Input() public min: string | inputMsg.MsgFn;\r\n  @Input() public minlength: string | inputMsg.MsgFn;\r\n  @Input() public pattern: string | inputMsg.MsgFn;\r\n  @Input() public position: inputMsg.Position;\r\n  @Input() public required: string | inputMsg.MsgFn;\r\n\r\n  // Currently shown message\r\n  public currentMsg: string;\r\n\r\n  private currentStatus: inputMsg.InputStatus;\r\n  private defaultConfig: inputMsg.Config;\r\n  private inputParams: inputMsg.InputParams;\r\n  /**\r\n   * All available messages corresponded\r\n   * to validation params of the input\r\n   */\r\n  private messages: inputMsg.ResultMsg = {};\r\n  private subscriptions: Subscription[] = [];\r\n\r\n  constructor(\r\n    private configService: InputMsgConfigService,\r\n    private storageService: InputStorageService\r\n  ) { }\r\n\r\n  public getClasses(): { [name: string]: boolean } {\r\n\r\n    const position: 'bottom-left' | 'bottom-right' = this.position || this.configService.get().position;\r\n    return {\r\n      'ngx-msg_pos_bottom-left': position === 'bottom-left',\r\n      'ngx-msg_pos_bottom-right': position === 'bottom-right',\r\n      'ngx-msg_color_tooltip': this.currentStatus === 'maxlength',\r\n      'ngx-msg_material': this.inputParams.material\r\n    };\r\n  }\r\n\r\n  public getStyles(): { [name: string]: string } {\r\n\r\n    let color: string;\r\n    if (this.currentStatus === 'maxlength') {\r\n      color = this.defaultConfig.colors.maxlength;\r\n    } else {\r\n      color = this.defaultConfig.colors.error;\r\n    }\r\n    return { color: color };\r\n  }\r\n\r\n  public ngOnChanges(changes: { [prop: string]: SimpleChange }): void {\r\n\r\n    const changeableProps = {\r\n      email: true,\r\n      integer: true,\r\n      max: true,\r\n      maxlength: true,\r\n      min: true,\r\n      minlength: true,\r\n      position: true,\r\n      required: true\r\n    };\r\n\r\n    Object.keys(changes).forEach(name => {\r\n      if (!changeableProps[name] || changes[name].isFirstChange()) {\r\n        return;\r\n      }\r\n      this.setMessage(name as inputMsg.ValidatorName);\r\n\r\n      // update currentMsg if it has been changed\r\n      // and the input is invalid\r\n      if (this.currentStatus === name && name !== 'maxlength') {\r\n        this.currentMsg = this.messages[name];\r\n      }\r\n    });\r\n  }\r\n\r\n  public ngOnDestroy(): void {\r\n    this.subscriptions.forEach(sub => sub.unsubscribe());\r\n  }\r\n\r\n  public ngOnInit(): void {\r\n\r\n    this.defaultConfig = this.configService.get();\r\n\r\n    if (!this.for) {\r\n      throw new Error('ngxMsg component: \\'for\\' parameter with the input id or name must be provided.');\r\n    }\r\n\r\n    this.inputParams = this.storageService.get(this.for);\r\n    if (!this.inputParams) {\r\n      throw new Error(`ngxMsg component: can\\'t find the input element with id or name: ${this.for}`);\r\n    }\r\n\r\n    // Set default or custom messages for given validation params\r\n    this.setAllMessages();\r\n\r\n    // Listen to the input status\r\n    const statusSub: Subscription = this.inputParams.status\r\n      .subscribe(this.onStatusChange.bind(this));\r\n    this.subscriptions.push(statusSub);\r\n\r\n    // Listen to the input params change\r\n    const inputParamsChangeSub: Subscription = this.inputParams.paramChange\r\n      .subscribe(this.onInputParamsChange.bind(this));\r\n    this.subscriptions.push(inputParamsChangeSub);\r\n  }\r\n\r\n  // Updates messages when input params change\r\n  private onInputParamsChange(changedPropName: 'label' | inputMsg.ValidatorName): void {\r\n\r\n    if (changedPropName === 'label') {\r\n      this.setAllMessages();\r\n    } else {\r\n      this.setMessage(changedPropName as inputMsg.ValidatorName);\r\n    }\r\n\r\n    // update current msg if the input is invalid\r\n    if (this.currentStatus === 'pristine' ||\r\n      this.currentStatus === 'valid' ||\r\n      this.currentStatus === 'maxlength') {\r\n      return;\r\n    }\r\n    this.currentMsg = this.messages[this.currentStatus];\r\n  }\r\n\r\n  // Updates currentStatus and shows/hides currentMsg\r\n  private onStatusChange(status: inputMsg.InputStatus): void {\r\n\r\n    this.currentStatus = status;\r\n    switch (status) {\r\n      case 'pristine':\r\n        this.currentMsg = '';\r\n        break;\r\n      case 'valid':\r\n        this.currentMsg = '';\r\n        break;\r\n      case 'maxlength':\r\n        this.currentMsg = this.messages[status];\r\n        setTimeout(() => { this.currentMsg = ''; }, 2000);\r\n        break;\r\n      default:\r\n        this.currentMsg = this.messages[status];\r\n    }\r\n  }\r\n\r\n  private setAllMessages(): void {\r\n    Object.keys(this.inputParams.validationParams).forEach((name: inputMsg.ValidatorName) => {\r\n      this.setMessage(name);\r\n    });\r\n  }\r\n\r\n  // Sets message text for a given validation parameter.\r\n  // If appropriate message expression is not provided\r\n  // throgh @Input() binding - the default one is used instead.\r\n  private setMessage(name: inputMsg.ValidatorName): void {\r\n\r\n    if (!this.inputParams.validationParams[name]) {\r\n      return;\r\n    }\r\n\r\n    // helper type guard\r\n    const isFn = (arg: string | Function): arg is inputMsg.MsgFn => {\r\n      return typeof arg === 'function';\r\n    };\r\n\r\n    // get specific or default msgExpression\r\n    let msgExpression: inputMsg.MsgFn | string;\r\n    if (typeof this[name] !== 'undefined') {\r\n      msgExpression = this[name] as inputMsg.MsgFn | string;\r\n    } else {\r\n      msgExpression = this.defaultConfig.msg[name] as inputMsg.MsgFn | string;\r\n    }\r\n\r\n    // Set a message generated by MsgFn() or as a simle string\r\n    if (isFn(msgExpression)) {\r\n      this.messages[name] = msgExpression(this.inputParams.label, this.inputParams.validationParams[name].value);\r\n    } else {\r\n      this.messages[name] = msgExpression;\r\n    }\r\n\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { InputMsgConfigService } from './input-msg-config.service';\r\nimport { InputStorageService } from './input-storage.service';\r\n\r\nimport { InputEmailDirective } from './input-email/input-email.directive';\r\nimport { InputNumberDirective } from './input-number/input-number.directive';\r\nimport { InputTextDirective } from './input-text/input-text.directive';\r\nimport { LabelDirective } from './label/label.directive';\r\nimport { MsgComponent } from './msg/msg.component';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    BrowserAnimationsModule,\r\n    CommonModule,\r\n    FormsModule\r\n  ],\r\n  declarations: [\r\n    InputEmailDirective,\r\n    InputNumberDirective,\r\n    InputTextDirective,\r\n    LabelDirective,\r\n    MsgComponent\r\n  ],\r\n  providers: [\r\n    InputMsgConfigService,\r\n    InputStorageService\r\n  ],\r\n  exports: [\r\n    InputEmailDirective,\r\n    InputNumberDirective,\r\n    InputTextDirective,\r\n    LabelDirective,\r\n    MsgComponent\r\n  ]\r\n})\r\n\r\nexport class InputMsgModule { }\r\n"],"names":["Injectable","NgModel","Subject","BehaviorSubject","tslib_1.__values","Input","tslib_1.__extends","Directive","NG_VALIDATORS","ElementRef","Component","ViewEncapsulation","trigger","state","style","transition","animate","NgModule","BrowserAnimationsModule","CommonModule","FormsModule"],"mappings":"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"}
